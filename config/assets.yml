<%=
=begin

WHAT HAPPEND TO assets.yml? AND WHAT ARE THE $use_new_styles AND $use_high_contrast SASS VARIABLES?
-----------------------------------------------------------------------------

TL,DR: don't add things to this file. Put css bundles in 'assets_real.yml'

In order to allow accounts to opt-in to a feature flag to use the new styles
that UI/UX is working on, and in order to allow individual users to turn on a
feature flag for high-contrast styles, we do some trickery in our sass.

### What you, the developer need to know.
In any sass file, you can do things like:

  @include 'environment'; // or 'variables' or 'variant_variables' if you need to be more fine grained

  @if $use_new_styles {
    background-color: red;
  } @else {
    background-color: blue;
  }

  @if not $use_high_contrast{
    font-size: 12px;
  }

...and those styles will show up for users depending on their own
:use_high_contrast feature flag and the account's :use_new_styles feature flag.

Make sure, if you see stuff about $use_high_contrast or $use_new_styles in a
sass file you are working on, that you test it with the feature flag both on and
off, so your changes don't mess up the other. At least having them in the same
file will make it easier than keeping track of some orverrides.css file floating
around somewhere that might be overriding or depending on the rules you're
changing though eh?

Common Gotcha With Variables:
variables in sass are block scoped, and @if is a block so you can't do:
  @if $use_new_styles { $textColor: black } @else { $textColor: grey}
because $textColor wont be available anywere ouside that @if.
to get around that do:
  $textColor: null;
  @if $use_new_styles { $textColor: black } @else { $textColor: grey}
You *could* do:
  $textColor: grey;
  @if $use_new_styles { $textColor: black }
but DON'T, the explicit semantics of either being in the @if or the @else will help
us when we delete things after everyone has $use_new_styles.

A key goal is that, as we work toward the new styles, put anything that we won't
need anymore inside an '@if not $use_new_styles' block, SO WE CAN DELETE STUFF
SOMEDAY!! YAY!

for more info on the @if and @else syntax see:
http://sass-lang.com/documentation/file.SASS_REFERENCE.html#_8


The Nitty Gritty:
We can do this because Canvas::MultiVariantCompassCompiler#compile_all
(which is the thing that we use to compile all of our sass) compiles each sass
file 4 times, each time adding the path 'app/stylesheets/variants/<variant>'
to the load path so when we @import 'variant_variables', it is actually
grabbing, for example:
app/stylesheets/variants/new_styles_high_contrast/_variant_variables.scss
which sets the variables $use_new_styles and $use_high_contrast correspondingly.

It also outputs all the css files for each variant to a folder with the same
name. Here in assets.yml we manipulate the actual yml in assets_real.yml to make 4 bundles
out of each original bundle, and rename the file paths in each to point to the generated
css directory for that variant.
And finally we do stuff in ApplicationController#include_css_bundles, so when you say
`jammit_css :speedgrader`, it will look at the user's :use_high_contrast feature flag
and the account's :use_new_styles flag and (assuming they were both set to true) it will
tell jammit it wants the 'speedgrader_new_styles_high_contrast' bundle which will include
things like 'public/stylesheets_compiled/new_styles_high_contrast/speed_grader.css',
which was compiled with the $use_new_styles and $use_high_contrast variables set correctly.

=end
  require File.join(Jammit::ASSET_ROOT, 'lib', 'multi_variant_compass_compiler')
  MultiVariantCompassCompiler.make_variants_from_real_assets_yml
%>
