// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`PlannerApp always renders today and tomorrow when only items are in the future 1`] = `
<div
  className="PlannerApp large"
  data-testid="PlannerApp"
>
  <View
    as="div"
    borderColor="primary"
    display="auto"
    focusColor="info"
    focusPosition="offset"
    margin="x-small 0 0 0"
    overflowX="visible"
    overflowY="visible"
    position="static"
    shouldAnimateFocus={true}
    textAlign="center"
    withVisualDebug={false}
  >
    <ShowOnFocusButton
      buttonProps={
        Object {
          "onClick": undefined,
        }
      }
      buttonRef={[Function]}
    >
      Load prior dates
    </ShowOnFocusButton>
  </View>
  <LoadingPastIndicator
    allPastItemsLoaded={false}
    loadingPast={false}
  />
  <Animatable(Day)
    animatableIndex={1}
    day="2017-04-24"
    itemsForDay={Array []}
    key="2017-04-24"
    responsiveSize="large"
    showMissingAssignments={false}
    simplifiedControls={false}
    singleCourseView={false}
    timeZone="Asia/Tokyo"
  />
  <Animatable(Day)
    animatableIndex={2}
    day="2017-04-25"
    itemsForDay={Array []}
    key="2017-04-25"
    responsiveSize="large"
    showMissingAssignments={false}
    simplifiedControls={false}
    singleCourseView={false}
    timeZone="Asia/Tokyo"
  />
  <EmptyDays
    animatableIndex={3}
    day="2017-04-26"
    endday="2017-04-28"
    key="2017-04-26"
    responsiveSize="large"
    timeZone="Asia/Tokyo"
  />
  <Animatable(Day)
    animatableIndex={4}
    day="2017-04-29"
    itemsForDay={
      Array [
        Object {
          "dateBucketMoment": "2017-04-28T15:00:00.000Z",
        },
      ]
    }
    key="2017-04-29"
    responsiveSize="large"
    showMissingAssignments={false}
    simplifiedControls={false}
    singleCourseView={false}
    timeZone="Asia/Tokyo"
  />
  <div
    id="planner-app-fixed-element"
  />
  <LoadingFutureIndicator
    allFutureItemsLoaded={false}
    loadingFuture={false}
    onLoadMore={[Function]}
    plannerActive={[Function]}
  />
</div>
`;

exports[`PlannerApp empty day calculation always renders yesterday, today and tomorrow 1`] = `
<div
  className="PlannerApp large"
  data-testid="PlannerApp"
>
  <View
    as="div"
    borderColor="primary"
    display="auto"
    focusColor="info"
    focusPosition="offset"
    margin="x-small 0 0 0"
    overflowX="visible"
    overflowY="visible"
    position="static"
    shouldAnimateFocus={true}
    textAlign="center"
    withVisualDebug={false}
  >
    <ShowOnFocusButton
      buttonProps={
        Object {
          "onClick": undefined,
        }
      }
      buttonRef={[Function]}
    >
      Load prior dates
    </ShowOnFocusButton>
  </View>
  <LoadingPastIndicator
    allPastItemsLoaded={false}
    loadingPast={false}
  />
  <Animatable(Day)
    animatableIndex={1}
    day="2017-04-19"
    itemsForDay={
      Array [
        Object {
          "dateBucketMoment": "2017-04-18T15:00:00.000Z",
        },
      ]
    }
    key="2017-04-19"
    responsiveSize="large"
    showMissingAssignments={false}
    simplifiedControls={false}
    singleCourseView={false}
    timeZone="Asia/Tokyo"
  />
  <Animatable(Day)
    animatableIndex={2}
    day="2017-04-23"
    itemsForDay={Array []}
    key="2017-04-23"
    responsiveSize="large"
    showMissingAssignments={false}
    simplifiedControls={false}
    singleCourseView={false}
    timeZone="Asia/Tokyo"
  />
  <Animatable(Day)
    animatableIndex={3}
    day="2017-04-24"
    itemsForDay={Array []}
    key="2017-04-24"
    responsiveSize="large"
    showMissingAssignments={false}
    simplifiedControls={false}
    singleCourseView={false}
    timeZone="Asia/Tokyo"
  />
  <Animatable(Day)
    animatableIndex={4}
    day="2017-04-25"
    itemsForDay={Array []}
    key="2017-04-25"
    responsiveSize="large"
    showMissingAssignments={false}
    simplifiedControls={false}
    singleCourseView={false}
    timeZone="Asia/Tokyo"
  />
  <EmptyDays
    animatableIndex={5}
    day="2017-04-26"
    endday="2017-04-28"
    key="2017-04-26"
    responsiveSize="large"
    timeZone="Asia/Tokyo"
  />
  <Animatable(Day)
    animatableIndex={6}
    day="2017-04-29"
    itemsForDay={
      Array [
        Object {
          "dateBucketMoment": "2017-04-28T15:00:00.000Z",
        },
      ]
    }
    key="2017-04-29"
    responsiveSize="large"
    showMissingAssignments={false}
    simplifiedControls={false}
    singleCourseView={false}
    timeZone="Asia/Tokyo"
  />
  <div
    id="planner-app-fixed-element"
  />
  <LoadingFutureIndicator
    allFutureItemsLoaded={false}
    loadingFuture={false}
    onLoadMore={[Function]}
    plannerActive={[Function]}
  />
</div>
`;

exports[`PlannerApp empty day calculation does not render an empty tomorrow when tomorrow may only be partially loaded 1`] = `
<div
  className="PlannerApp large"
  data-testid="PlannerApp"
>
  <View
    as="div"
    borderColor="primary"
    display="auto"
    focusColor="info"
    focusPosition="offset"
    margin="x-small 0 0 0"
    overflowX="visible"
    overflowY="visible"
    position="static"
    shouldAnimateFocus={true}
    textAlign="center"
    withVisualDebug={false}
  >
    <ShowOnFocusButton
      buttonProps={
        Object {
          "onClick": undefined,
        }
      }
      buttonRef={[Function]}
    >
      Load prior dates
    </ShowOnFocusButton>
  </View>
  <LoadingPastIndicator
    allPastItemsLoaded={false}
    loadingPast={false}
  />
  <Animatable(Day)
    animatableIndex={1}
    day="2017-04-24"
    itemsForDay={
      Array [
        Object {
          "dateBucketMoment": "2017-04-23T15:00:00.000Z",
        },
      ]
    }
    key="2017-04-24"
    responsiveSize="large"
    showMissingAssignments={false}
    simplifiedControls={false}
    singleCourseView={false}
    timeZone="Asia/Tokyo"
  />
  <div
    id="planner-app-fixed-element"
  />
  <LoadingFutureIndicator
    allFutureItemsLoaded={false}
    loadingFuture={false}
    onLoadMore={[Function]}
    plannerActive={[Function]}
  />
</div>
`;

exports[`PlannerApp empty day calculation merges 3 consecutive empty days in the future 1`] = `
<div
  className="PlannerApp large"
  data-testid="PlannerApp"
>
  <View
    as="div"
    borderColor="primary"
    display="auto"
    focusColor="info"
    focusPosition="offset"
    margin="x-small 0 0 0"
    overflowX="visible"
    overflowY="visible"
    position="static"
    shouldAnimateFocus={true}
    textAlign="center"
    withVisualDebug={false}
  >
    <ShowOnFocusButton
      buttonProps={
        Object {
          "onClick": undefined,
        }
      }
      buttonRef={[Function]}
    >
      Load prior dates
    </ShowOnFocusButton>
  </View>
  <LoadingPastIndicator
    allPastItemsLoaded={false}
    loadingPast={false}
  />
  <Animatable(Day)
    animatableIndex={1}
    day="2017-04-24"
    itemsForDay={
      Array [
        Object {
          "dateBucketMoment": "2017-04-23T15:00:00.000Z",
        },
      ]
    }
    key="2017-04-24"
    responsiveSize="large"
    showMissingAssignments={false}
    simplifiedControls={false}
    singleCourseView={false}
    timeZone="Asia/Tokyo"
  />
  <Animatable(Day)
    animatableIndex={2}
    day="2017-04-25"
    itemsForDay={
      Array [
        Object {
          "dateBucketMoment": "2017-04-24T15:00:00.000Z",
        },
      ]
    }
    key="2017-04-25"
    responsiveSize="large"
    showMissingAssignments={false}
    simplifiedControls={false}
    singleCourseView={false}
    timeZone="Asia/Tokyo"
  />
  <EmptyDays
    animatableIndex={3}
    day="2017-04-26"
    endday="2017-04-28"
    key="2017-04-26"
    responsiveSize="large"
    timeZone="Asia/Tokyo"
  />
  <Animatable(Day)
    animatableIndex={4}
    day="2017-04-29"
    itemsForDay={
      Array [
        Object {
          "dateBucketMoment": "2017-04-28T15:00:00.000Z",
        },
      ]
    }
    key="2017-04-29"
    responsiveSize="large"
    showMissingAssignments={false}
    simplifiedControls={false}
    singleCourseView={false}
    timeZone="Asia/Tokyo"
  />
  <div
    id="planner-app-fixed-element"
  />
  <LoadingFutureIndicator
    allFutureItemsLoaded={false}
    loadingFuture={false}
    onLoadMore={[Function]}
    plannerActive={[Function]}
  />
</div>
`;

exports[`PlannerApp empty day calculation only renders days with items in the past 1`] = `
<div
  className="PlannerApp large"
  data-testid="PlannerApp"
>
  <View
    as="div"
    borderColor="primary"
    display="auto"
    focusColor="info"
    focusPosition="offset"
    margin="x-small 0 0 0"
    overflowX="visible"
    overflowY="visible"
    position="static"
    shouldAnimateFocus={true}
    textAlign="center"
    withVisualDebug={false}
  >
    <ShowOnFocusButton
      buttonProps={
        Object {
          "onClick": undefined,
        }
      }
      buttonRef={[Function]}
    >
      Load prior dates
    </ShowOnFocusButton>
  </View>
  <LoadingPastIndicator
    allPastItemsLoaded={false}
    loadingPast={false}
  />
  <Animatable(Day)
    animatableIndex={1}
    day="2017-04-18"
    itemsForDay={
      Array [
        Object {
          "dateBucketMoment": "2017-04-17T15:00:00.000Z",
        },
      ]
    }
    key="2017-04-18"
    responsiveSize="large"
    showMissingAssignments={false}
    simplifiedControls={false}
    singleCourseView={false}
    timeZone="Asia/Tokyo"
  />
  <Animatable(Day)
    animatableIndex={2}
    day="2017-04-20"
    itemsForDay={
      Array [
        Object {
          "dateBucketMoment": "2017-04-19T15:00:00.000Z",
        },
      ]
    }
    key="2017-04-20"
    responsiveSize="large"
    showMissingAssignments={false}
    simplifiedControls={false}
    singleCourseView={false}
    timeZone="Asia/Tokyo"
  />
  <Animatable(Day)
    animatableIndex={3}
    day="2017-04-23"
    itemsForDay={Array []}
    key="2017-04-23"
    responsiveSize="large"
    showMissingAssignments={false}
    simplifiedControls={false}
    singleCourseView={false}
    timeZone="Asia/Tokyo"
  />
  <Animatable(Day)
    animatableIndex={4}
    day="2017-04-24"
    itemsForDay={Array []}
    key="2017-04-24"
    responsiveSize="large"
    showMissingAssignments={false}
    simplifiedControls={false}
    singleCourseView={false}
    timeZone="Asia/Tokyo"
  />
  <div
    id="planner-app-fixed-element"
  />
  <LoadingFutureIndicator
    allFutureItemsLoaded={false}
    loadingFuture={false}
    onLoadMore={[Function]}
    plannerActive={[Function]}
  />
</div>
`;

exports[`PlannerApp empty day calculation renders 2 consecutive empty days in the future as empty days 1`] = `
<div
  className="PlannerApp large"
  data-testid="PlannerApp"
>
  <View
    as="div"
    borderColor="primary"
    display="auto"
    focusColor="info"
    focusPosition="offset"
    margin="x-small 0 0 0"
    overflowX="visible"
    overflowY="visible"
    position="static"
    shouldAnimateFocus={true}
    textAlign="center"
    withVisualDebug={false}
  >
    <ShowOnFocusButton
      buttonProps={
        Object {
          "onClick": undefined,
        }
      }
      buttonRef={[Function]}
    >
      Load prior dates
    </ShowOnFocusButton>
  </View>
  <LoadingPastIndicator
    allPastItemsLoaded={false}
    loadingPast={false}
  />
  <Animatable(Day)
    animatableIndex={1}
    day="2017-04-24"
    itemsForDay={
      Array [
        Object {
          "dateBucketMoment": "2017-04-23T15:00:00.000Z",
        },
      ]
    }
    key="2017-04-24"
    responsiveSize="large"
    showMissingAssignments={false}
    simplifiedControls={false}
    singleCourseView={false}
    timeZone="Asia/Tokyo"
  />
  <Animatable(Day)
    animatableIndex={2}
    day="2017-04-25"
    itemsForDay={
      Array [
        Object {
          "dateBucketMoment": "2017-04-24T15:00:00.000Z",
        },
      ]
    }
    key="2017-04-25"
    responsiveSize="large"
    showMissingAssignments={false}
    simplifiedControls={false}
    singleCourseView={false}
    timeZone="Asia/Tokyo"
  />
  <Animatable(Day)
    animatableIndex={3}
    day="2017-04-26"
    itemsForDay={Array []}
    key="2017-04-26"
    responsiveSize="large"
    showMissingAssignments={false}
    simplifiedControls={false}
    singleCourseView={false}
    timeZone="Asia/Tokyo"
  />
  <Animatable(Day)
    animatableIndex={4}
    day="2017-04-27"
    itemsForDay={Array []}
    key="2017-04-27"
    responsiveSize="large"
    showMissingAssignments={false}
    simplifiedControls={false}
    singleCourseView={false}
    timeZone="Asia/Tokyo"
  />
  <Animatable(Day)
    animatableIndex={5}
    day="2017-04-28"
    itemsForDay={
      Array [
        Object {
          "dateBucketMoment": "2017-04-27T15:00:00.000Z",
        },
      ]
    }
    key="2017-04-28"
    responsiveSize="large"
    showMissingAssignments={false}
    simplifiedControls={false}
    singleCourseView={false}
    timeZone="Asia/Tokyo"
  />
  <div
    id="planner-app-fixed-element"
  />
  <LoadingFutureIndicator
    allFutureItemsLoaded={false}
    loadingFuture={false}
    onLoadMore={[Function]}
    plannerActive={[Function]}
  />
</div>
`;

exports[`PlannerApp only renders today when the only item is today 1`] = `
<div
  className="PlannerApp large"
  data-testid="PlannerApp"
>
  <View
    as="div"
    borderColor="primary"
    display="auto"
    focusColor="info"
    focusPosition="offset"
    margin="x-small 0 0 0"
    overflowX="visible"
    overflowY="visible"
    position="static"
    shouldAnimateFocus={true}
    textAlign="center"
    withVisualDebug={false}
  >
    <ShowOnFocusButton
      buttonProps={
        Object {
          "onClick": undefined,
        }
      }
      buttonRef={[Function]}
    >
      Load prior dates
    </ShowOnFocusButton>
  </View>
  <LoadingPastIndicator
    allPastItemsLoaded={false}
    loadingPast={false}
  />
  <Animatable(Day)
    animatableIndex={1}
    day="2017-04-24"
    itemsForDay={
      Array [
        Object {
          "dateBucketMoment": "2017-04-23T15:00:00.000Z",
        },
      ]
    }
    key="2017-04-24"
    responsiveSize="large"
    showMissingAssignments={false}
    simplifiedControls={false}
    singleCourseView={false}
    timeZone="Asia/Tokyo"
  />
  <div
    id="planner-app-fixed-element"
  />
  <LoadingFutureIndicator
    allFutureItemsLoaded={false}
    loadingFuture={false}
    onLoadMore={[Function]}
    plannerActive={[Function]}
  />
</div>
`;

exports[`PlannerApp renders base component 1`] = `
<div
  className="PlannerApp large"
  data-testid="PlannerApp"
>
  <View
    as="div"
    borderColor="primary"
    display="auto"
    focusColor="info"
    focusPosition="offset"
    margin="x-small 0 0 0"
    overflowX="visible"
    overflowY="visible"
    position="static"
    shouldAnimateFocus={true}
    textAlign="center"
    withVisualDebug={false}
  >
    <ShowOnFocusButton
      buttonProps={
        Object {
          "onClick": undefined,
        }
      }
      buttonRef={[Function]}
    >
      Load prior dates
    </ShowOnFocusButton>
  </View>
  <LoadingPastIndicator
    allPastItemsLoaded={false}
    loadingPast={false}
  />
  <Animatable(Day)
    animatableIndex={1}
    day="2017-04-24"
    itemsForDay={
      Array [
        Object {
          "dateBucketMoment": "2017-04-23T15:00:00.000Z",
        },
      ]
    }
    key="2017-04-24"
    responsiveSize="large"
    showMissingAssignments={false}
    simplifiedControls={false}
    singleCourseView={false}
    timeZone="Asia/Tokyo"
  />
  <Animatable(Day)
    animatableIndex={2}
    day="2017-04-25"
    itemsForDay={
      Array [
        Object {
          "dateBucketMoment": "2017-04-24T15:00:00.000Z",
        },
      ]
    }
    key="2017-04-25"
    responsiveSize="large"
    showMissingAssignments={false}
    simplifiedControls={false}
    singleCourseView={false}
    timeZone="Asia/Tokyo"
  />
  <Animatable(Day)
    animatableIndex={3}
    day="2017-04-26"
    itemsForDay={
      Array [
        Object {
          "dateBucketMoment": "2017-04-25T15:00:00.000Z",
        },
      ]
    }
    key="2017-04-26"
    responsiveSize="large"
    showMissingAssignments={false}
    simplifiedControls={false}
    singleCourseView={false}
    timeZone="Asia/Tokyo"
  />
  <div
    id="planner-app-fixed-element"
  />
  <LoadingFutureIndicator
    allFutureItemsLoaded={false}
    loadingFuture={false}
    onLoadMore={[Function]}
    plannerActive={[Function]}
  />
</div>
`;

exports[`PlannerApp renders empty component with no assignments 1`] = `
<div
  className="PlannerApp large"
  data-testid="PlannerApp"
>
  <View
    as="div"
    borderColor="primary"
    display="auto"
    focusColor="info"
    focusPosition="offset"
    margin="x-small 0 0 0"
    overflowX="visible"
    overflowY="visible"
    position="static"
    shouldAnimateFocus={true}
    textAlign="center"
    withVisualDebug={false}
  >
    <ShowOnFocusButton
      buttonProps={
        Object {
          "onClick": undefined,
        }
      }
      buttonRef={[Function]}
    >
      Load prior dates
    </ShowOnFocusButton>
  </View>
  <PlannerEmptyState
    changeDashboardView={[Function]}
    isCompletelyEmpty={false}
    onAddToDo={[Function]}
    responsiveSize="large"
  />
</div>
`;

exports[`PlannerApp renders loading past spinner when loading past and there are no future items 1`] = `
<div
  className="PlannerApp large"
  data-testid="PlannerApp"
>
  <View
    as="div"
    borderColor="primary"
    display="auto"
    focusColor="info"
    focusPosition="offset"
    margin="x-small 0 0 0"
    overflowX="visible"
    overflowY="visible"
    position="static"
    shouldAnimateFocus={true}
    textAlign="center"
    withVisualDebug={false}
  >
    <ShowOnFocusButton
      buttonProps={
        Object {
          "onClick": undefined,
        }
      }
      buttonRef={[Function]}
    >
      Load prior dates
    </ShowOnFocusButton>
  </View>
  <LoadingPastIndicator
    allPastItemsLoaded={false}
    loadingPast={true}
  />
  <div
    id="planner-app-fixed-element"
  />
</div>
`;

exports[`PlannerApp shows only the loading component when the isLoading prop is true 1`] = `
<div
  className="PlannerApp large"
  data-testid="PlannerApp"
>
  <View
    as="div"
    borderColor="primary"
    display="auto"
    focusColor="info"
    focusPosition="offset"
    margin="x-small 0 0 0"
    overflowX="visible"
    overflowY="visible"
    position="static"
    shouldAnimateFocus={true}
    textAlign="center"
    withVisualDebug={false}
  >
    <ShowOnFocusButton
      buttonProps={
        Object {
          "onClick": undefined,
        }
      }
      buttonRef={[Function]}
    >
      Load prior dates
    </ShowOnFocusButton>
  </View>
  <View
    borderColor="primary"
    display="block"
    focusColor="info"
    focusPosition="offset"
    key="spinner"
    overflowX="visible"
    overflowY="visible"
    padding="xx-large medium"
    position="static"
    shouldAnimateFocus={true}
    textAlign="center"
    withVisualDebug={false}
  >
    <Spinner
      as="div"
      renderTitle={[Function]}
      size="medium"
      variant="default"
    />
  </View>
  <div
    id="planner-app-fixed-element"
  />
</div>
`;

exports[`PlannerApp shows the loading past indicator when loadingPast prop is true 1`] = `
<div
  className="PlannerApp large"
  data-testid="PlannerApp"
>
  <View
    as="div"
    borderColor="primary"
    display="auto"
    focusColor="info"
    focusPosition="offset"
    margin="x-small 0 0 0"
    overflowX="visible"
    overflowY="visible"
    position="static"
    shouldAnimateFocus={true}
    textAlign="center"
    withVisualDebug={false}
  >
    <ShowOnFocusButton
      buttonProps={
        Object {
          "onClick": undefined,
        }
      }
      buttonRef={[Function]}
    >
      Load prior dates
    </ShowOnFocusButton>
  </View>
  <LoadingPastIndicator
    allPastItemsLoaded={false}
    loadingPast={true}
  />
  <Animatable(Day)
    animatableIndex={1}
    day="2017-04-24"
    itemsForDay={
      Array [
        Object {
          "dateBucketMoment": "2017-04-23T15:00:00.000Z",
        },
      ]
    }
    key="2017-04-24"
    responsiveSize="large"
    showMissingAssignments={false}
    simplifiedControls={false}
    singleCourseView={false}
    timeZone="Asia/Tokyo"
  />
  <Animatable(Day)
    animatableIndex={2}
    day="2017-04-25"
    itemsForDay={
      Array [
        Object {
          "dateBucketMoment": "2017-04-24T15:00:00.000Z",
        },
      ]
    }
    key="2017-04-25"
    responsiveSize="large"
    showMissingAssignments={false}
    simplifiedControls={false}
    singleCourseView={false}
    timeZone="Asia/Tokyo"
  />
  <Animatable(Day)
    animatableIndex={3}
    day="2017-04-26"
    itemsForDay={
      Array [
        Object {
          "dateBucketMoment": "2017-04-25T15:00:00.000Z",
        },
      ]
    }
    key="2017-04-26"
    responsiveSize="large"
    showMissingAssignments={false}
    simplifiedControls={false}
    singleCourseView={false}
    timeZone="Asia/Tokyo"
  />
  <div
    id="planner-app-fixed-element"
  />
</div>
`;
