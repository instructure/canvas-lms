// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`new activity button does not show when there is no new activity 1`] = `
<Fragment>
  <style>
    
  .PlannerHeader-styles__root {
    font-size: 1rem;
    font-family: LatoWeb, Lato, "Helvetica Neue", Helvetica, Arial, sans-serif;
    font-weight: 400;
    color: #394B58;
    background: #FFFFFF;
    white-space: nowrap;
  }
  
  </style>
  <div
    className="PlannerHeader-styles__root PlannerHeader"
    data-testid="PlannerHeader"
  >
    <Button
      as="button"
      color="primary-inverse"
      cursor="pointer"
      display="inline-block"
      elementRef={[Function]}
      id="planner-today-btn"
      margin="0 medium 0 0"
      onClick={[Function]}
      size="medium"
      textAlign="center"
      type="button"
      withBackground={true}
    >
      Today
    </Button>
    <IconButton
      as="button"
      color="secondary"
      cursor="pointer"
      elementRef={[Function]}
      margin="0 medium 0 0"
      onClick={[Function]}
      renderIcon={[Function]}
      screenReaderLabel="Add To Do"
      shape="rectangle"
      size="medium"
      type="button"
      withBackground={false}
      withBorder={false}
    />
    <IconButton
      as="button"
      color="secondary"
      cursor="pointer"
      elementRef={[Function]}
      margin="0 medium 0 0"
      onClick={[Function]}
      renderIcon={[Function]}
      screenReaderLabel="Show My Grades"
      shape="rectangle"
      size="medium"
      type="button"
      withBackground={false}
      withBorder={false}
    />
    <Popover
      color="primary"
      constrain="window"
      contentRef={[Function]}
      defaultIsShowingContent={false}
      insertAt="bottom"
      isShowingContent={false}
      offsetX={0}
      offsetY={0}
      on="click"
      onBlur={[Function]}
      onClick={[Function]}
      onFocus={[Function]}
      onHideContent={[Function]}
      onKeyDown={[Function]}
      onKeyUp={[Function]}
      onMouseOut={[Function]}
      onMouseOver={[Function]}
      onPositionChanged={[Function]}
      onPositioned={[Function]}
      onShowContent={[Function]}
      placement="bottom end"
      positionTarget={null}
      renderTrigger={
        <Badge
          count={1}
          countUntil={100}
          elementRef={[Function]}
          formatOutput={[Function]}
          formatOverflowText={[Function]}
          margin="0 medium 0 0"
          placement="top end"
          pulse={false}
          standalone={false}
          type="count"
          variant="primary"
        >
          <IconButton
            as="button"
            color="secondary"
            cursor="pointer"
            elementRef={[Function]}
            margin="0"
            onClick={[Function]}
            renderIcon={[Function]}
            screenReaderLabel="opportunities popup"
            shape="rectangle"
            size="medium"
            type="button"
            withBackground={false}
            withBorder={false}
          />
        </Badge>
      }
      shadow="resting"
      shouldAlignArrow={false}
      shouldCloseOnDocumentClick={true}
      shouldCloseOnEscape={true}
      shouldContainFocus={false}
      shouldFocusContentOnTriggerBlur={false}
      shouldRenderOffscreen={false}
      shouldReturnFocus={true}
      shouldTrackPosition={true}
      stacking="topmost"
      withArrow={true}
    >
      <Animatable(Opportunities)
        courses={
          Array [
            Object {
              "id": "1",
              "longName": "Course Long Name",
              "shortName": "Course Short Name",
            },
          ]
        }
        dismiss={[Function]}
        dismissedOpportunities={
          Array [
            Object {
              "course_id": "1",
              "due_at": "2017-03-09T20:40:35Z",
              "html_url": "http://www.non_default_url.com",
              "id": "2",
              "name": "learning object title",
              "planner_override": Object {
                "dismissed": true,
              },
            },
          ]
        }
        maxHeight="none"
        newOpportunities={
          Array [
            Object {
              "course_id": "1",
              "due_at": "2017-03-09T20:40:35Z",
              "html_url": "http://www.non_default_url.com",
              "id": "1",
              "name": "learning object title",
            },
          ]
        }
        timeZone="America/Denver"
        togglePopover={[Function]}
      />
    </Popover>
    <Tray
      border={false}
      contentRef={[Function]}
      defaultFocusElement={null}
      insertAt="bottom"
      label="Add To Do"
      liveRegion={null}
      mountNode={null}
      onClose={[Function]}
      onDismiss={[Function]}
      onEnter={[Function]}
      onEntered={[Function]}
      onEntering={[Function]}
      onExit={[Function]}
      onExited={[Function]}
      onExiting={[Function]}
      onOpen={[Function]}
      open={false}
      placement="end"
      shadow={true}
      shouldCloseOnDocumentClick={false}
      shouldContainFocus={true}
      shouldReturnFocus={false}
      size="small"
    >
      <CloseButton
        as="button"
        cursor="pointer"
        margin="0"
        offset="x-small"
        onClick={[Function]}
        placement="start"
        screenReaderLabel="Close"
        size="small"
        type="button"
      />
      <UpdateItemTray
        courses={
          Array [
            Object {
              "id": "1",
              "longName": "Course Long Name",
              "shortName": "Course Short Name",
            },
          ]
        }
        locale="en"
        onDeletePlannerItem={[Function]}
        onSavePlannerItem={[Function]}
        timeZone="America/Denver"
      />
    </Tray>
    <Tray
      border={false}
      contentRef={[Function]}
      defaultFocusElement={null}
      insertAt="bottom"
      label="My Grades"
      liveRegion={null}
      mountNode={null}
      onClose={[Function]}
      onDismiss={[Function]}
      onEnter={[Function]}
      onEntered={[Function]}
      onEntering={[Function]}
      onExit={[Function]}
      onExited={[Function]}
      onExiting={[Function]}
      onOpen={[Function]}
      open={false}
      placement="end"
      shadow={true}
      shouldCloseOnDocumentClick={false}
      shouldContainFocus={true}
      shouldReturnFocus={true}
      size="small"
    >
      <View
        as="div"
        borderColor="primary"
        display="auto"
        focusColor="info"
        focusPosition="offset"
        overflowX="visible"
        overflowY="visible"
        padding="large large medium"
        position="static"
        shouldAnimateFocus={true}
        withVisualDebug={false}
      >
        <CloseButton
          as="button"
          cursor="pointer"
          margin="0"
          offset="x-small"
          onClick={[Function]}
          placement="start"
          screenReaderLabel="Close"
          size="small"
          type="button"
        />
        <GradesDisplay
          courses={
            Array [
              Object {
                "id": "1",
                "longName": "Course Long Name",
                "shortName": "Course Short Name",
              },
            ]
          }
          loading={false}
        />
      </View>
    </Tray>
    <Portal
      elementRef={[Function]}
      insertAt="bottom"
      mountNode={<div />}
      onClose={[Function]}
      onOpen={[Function]}
      open={false}
    >
      <StickyButton
        className="StickyButton-styles__newActivityButton"
        description="Scrolls up to the previous item with new activity."
        direction="up"
        elementRef={[Function]}
        id="new_activity_button"
        onClick={[Function]}
        zIndex={3}
      >
        New Activity
      </StickyButton>
    </Portal>
  </div>
</Fragment>
`;

exports[`new activity button shows when there is new activity 1`] = `
<Fragment>
  <style>
    
  .PlannerHeader-styles__root {
    font-size: 1rem;
    font-family: LatoWeb, Lato, "Helvetica Neue", Helvetica, Arial, sans-serif;
    font-weight: 400;
    color: #394B58;
    background: #FFFFFF;
    white-space: nowrap;
  }
  
  </style>
  <div
    className="PlannerHeader-styles__root PlannerHeader"
    data-testid="PlannerHeader"
  >
    <Button
      as="button"
      color="primary-inverse"
      cursor="pointer"
      display="inline-block"
      elementRef={[Function]}
      id="planner-today-btn"
      margin="0 medium 0 0"
      onClick={[Function]}
      size="medium"
      textAlign="center"
      type="button"
      withBackground={true}
    >
      Today
    </Button>
    <IconButton
      as="button"
      color="secondary"
      cursor="pointer"
      elementRef={[Function]}
      margin="0 medium 0 0"
      onClick={[Function]}
      renderIcon={[Function]}
      screenReaderLabel="Add To Do"
      shape="rectangle"
      size="medium"
      type="button"
      withBackground={false}
      withBorder={false}
    />
    <IconButton
      as="button"
      color="secondary"
      cursor="pointer"
      elementRef={[Function]}
      margin="0 medium 0 0"
      onClick={[Function]}
      renderIcon={[Function]}
      screenReaderLabel="Show My Grades"
      shape="rectangle"
      size="medium"
      type="button"
      withBackground={false}
      withBorder={false}
    />
    <Popover
      color="primary"
      constrain="window"
      contentRef={[Function]}
      defaultIsShowingContent={false}
      insertAt="bottom"
      isShowingContent={false}
      offsetX={0}
      offsetY={0}
      on="click"
      onBlur={[Function]}
      onClick={[Function]}
      onFocus={[Function]}
      onHideContent={[Function]}
      onKeyDown={[Function]}
      onKeyUp={[Function]}
      onMouseOut={[Function]}
      onMouseOver={[Function]}
      onPositionChanged={[Function]}
      onPositioned={[Function]}
      onShowContent={[Function]}
      placement="bottom end"
      positionTarget={null}
      renderTrigger={
        <Badge
          count={1}
          countUntil={100}
          elementRef={[Function]}
          formatOutput={[Function]}
          formatOverflowText={[Function]}
          margin="0 medium 0 0"
          placement="top end"
          pulse={false}
          standalone={false}
          type="count"
          variant="primary"
        >
          <IconButton
            as="button"
            color="secondary"
            cursor="pointer"
            elementRef={[Function]}
            margin="0"
            onClick={[Function]}
            renderIcon={[Function]}
            screenReaderLabel="opportunities popup"
            shape="rectangle"
            size="medium"
            type="button"
            withBackground={false}
            withBorder={false}
          />
        </Badge>
      }
      shadow="resting"
      shouldAlignArrow={false}
      shouldCloseOnDocumentClick={true}
      shouldCloseOnEscape={true}
      shouldContainFocus={false}
      shouldFocusContentOnTriggerBlur={false}
      shouldRenderOffscreen={false}
      shouldReturnFocus={true}
      shouldTrackPosition={true}
      stacking="topmost"
      withArrow={true}
    >
      <Animatable(Opportunities)
        courses={
          Array [
            Object {
              "id": "1",
              "longName": "Course Long Name",
              "shortName": "Course Short Name",
            },
          ]
        }
        dismiss={[Function]}
        dismissedOpportunities={
          Array [
            Object {
              "course_id": "1",
              "due_at": "2017-03-09T20:40:35Z",
              "html_url": "http://www.non_default_url.com",
              "id": "2",
              "name": "learning object title",
              "planner_override": Object {
                "dismissed": true,
              },
            },
          ]
        }
        maxHeight="none"
        newOpportunities={
          Array [
            Object {
              "course_id": "1",
              "due_at": "2017-03-09T20:40:35Z",
              "html_url": "http://www.non_default_url.com",
              "id": "1",
              "name": "learning object title",
            },
          ]
        }
        timeZone="America/Denver"
        togglePopover={[Function]}
      />
    </Popover>
    <Tray
      border={false}
      contentRef={[Function]}
      defaultFocusElement={null}
      insertAt="bottom"
      label="Add To Do"
      liveRegion={null}
      mountNode={null}
      onClose={[Function]}
      onDismiss={[Function]}
      onEnter={[Function]}
      onEntered={[Function]}
      onEntering={[Function]}
      onExit={[Function]}
      onExited={[Function]}
      onExiting={[Function]}
      onOpen={[Function]}
      open={false}
      placement="end"
      shadow={true}
      shouldCloseOnDocumentClick={false}
      shouldContainFocus={true}
      shouldReturnFocus={false}
      size="small"
    >
      <CloseButton
        as="button"
        cursor="pointer"
        margin="0"
        offset="x-small"
        onClick={[Function]}
        placement="start"
        screenReaderLabel="Close"
        size="small"
        type="button"
      />
      <UpdateItemTray
        courses={
          Array [
            Object {
              "id": "1",
              "longName": "Course Long Name",
              "shortName": "Course Short Name",
            },
          ]
        }
        locale="en"
        onDeletePlannerItem={[Function]}
        onSavePlannerItem={[Function]}
        timeZone="America/Denver"
      />
    </Tray>
    <Tray
      border={false}
      contentRef={[Function]}
      defaultFocusElement={null}
      insertAt="bottom"
      label="My Grades"
      liveRegion={null}
      mountNode={null}
      onClose={[Function]}
      onDismiss={[Function]}
      onEnter={[Function]}
      onEntered={[Function]}
      onEntering={[Function]}
      onExit={[Function]}
      onExited={[Function]}
      onExiting={[Function]}
      onOpen={[Function]}
      open={false}
      placement="end"
      shadow={true}
      shouldCloseOnDocumentClick={false}
      shouldContainFocus={true}
      shouldReturnFocus={true}
      size="small"
    >
      <View
        as="div"
        borderColor="primary"
        display="auto"
        focusColor="info"
        focusPosition="offset"
        overflowX="visible"
        overflowY="visible"
        padding="large large medium"
        position="static"
        shouldAnimateFocus={true}
        withVisualDebug={false}
      >
        <CloseButton
          as="button"
          cursor="pointer"
          margin="0"
          offset="x-small"
          onClick={[Function]}
          placement="start"
          screenReaderLabel="Close"
          size="small"
          type="button"
        />
        <GradesDisplay
          courses={
            Array [
              Object {
                "id": "1",
                "longName": "Course Long Name",
                "shortName": "Course Short Name",
              },
            ]
          }
          loading={false}
        />
      </View>
    </Tray>
    <Portal
      elementRef={[Function]}
      insertAt="bottom"
      mountNode={<div />}
      onClose={[Function]}
      onOpen={[Function]}
      open={true}
    >
      <StickyButton
        className="StickyButton-styles__newActivityButton"
        description="Scrolls up to the previous item with new activity."
        direction="up"
        elementRef={[Function]}
        id="new_activity_button"
        onClick={[Function]}
        zIndex={3}
      >
        New Activity
      </StickyButton>
    </Portal>
  </div>
</Fragment>
`;

exports[`renders the base component correctly with buttons and trays 1`] = `
<Fragment>
  <style>
    
  .PlannerHeader-styles__root {
    font-size: 1rem;
    font-family: LatoWeb, Lato, "Helvetica Neue", Helvetica, Arial, sans-serif;
    font-weight: 400;
    color: #394B58;
    background: #FFFFFF;
    white-space: nowrap;
  }
  
  </style>
  <div
    className="PlannerHeader-styles__root PlannerHeader"
    data-testid="PlannerHeader"
  >
    <Button
      as="button"
      color="primary-inverse"
      cursor="pointer"
      display="inline-block"
      elementRef={[Function]}
      id="planner-today-btn"
      margin="0 medium 0 0"
      onClick={[Function]}
      size="medium"
      textAlign="center"
      type="button"
      withBackground={true}
    >
      Today
    </Button>
    <IconButton
      as="button"
      color="secondary"
      cursor="pointer"
      elementRef={[Function]}
      margin="0 medium 0 0"
      onClick={[Function]}
      renderIcon={[Function]}
      screenReaderLabel="Add To Do"
      shape="rectangle"
      size="medium"
      type="button"
      withBackground={false}
      withBorder={false}
    />
    <IconButton
      as="button"
      color="secondary"
      cursor="pointer"
      elementRef={[Function]}
      margin="0 medium 0 0"
      onClick={[Function]}
      renderIcon={[Function]}
      screenReaderLabel="Show My Grades"
      shape="rectangle"
      size="medium"
      type="button"
      withBackground={false}
      withBorder={false}
    />
    <Popover
      color="primary"
      constrain="window"
      contentRef={[Function]}
      defaultIsShowingContent={false}
      insertAt="bottom"
      isShowingContent={false}
      offsetX={0}
      offsetY={0}
      on="click"
      onBlur={[Function]}
      onClick={[Function]}
      onFocus={[Function]}
      onHideContent={[Function]}
      onKeyDown={[Function]}
      onKeyUp={[Function]}
      onMouseOut={[Function]}
      onMouseOver={[Function]}
      onPositionChanged={[Function]}
      onPositioned={[Function]}
      onShowContent={[Function]}
      placement="bottom end"
      positionTarget={null}
      renderTrigger={
        <Badge
          count={1}
          countUntil={100}
          elementRef={[Function]}
          formatOutput={[Function]}
          formatOverflowText={[Function]}
          margin="0 medium 0 0"
          placement="top end"
          pulse={false}
          standalone={false}
          type="count"
          variant="primary"
        >
          <IconButton
            as="button"
            color="secondary"
            cursor="pointer"
            elementRef={[Function]}
            margin="0"
            onClick={[Function]}
            renderIcon={[Function]}
            screenReaderLabel="opportunities popup"
            shape="rectangle"
            size="medium"
            type="button"
            withBackground={false}
            withBorder={false}
          />
        </Badge>
      }
      shadow="resting"
      shouldAlignArrow={false}
      shouldCloseOnDocumentClick={true}
      shouldCloseOnEscape={true}
      shouldContainFocus={false}
      shouldFocusContentOnTriggerBlur={false}
      shouldRenderOffscreen={false}
      shouldReturnFocus={true}
      shouldTrackPosition={true}
      stacking="topmost"
      withArrow={true}
    >
      <Animatable(Opportunities)
        courses={
          Array [
            Object {
              "id": "1",
              "longName": "Course Long Name",
              "shortName": "Course Short Name",
            },
          ]
        }
        dismiss={[Function]}
        dismissedOpportunities={
          Array [
            Object {
              "course_id": "1",
              "due_at": "2017-03-09T20:40:35Z",
              "html_url": "http://www.non_default_url.com",
              "id": "2",
              "name": "learning object title",
              "planner_override": Object {
                "dismissed": true,
              },
            },
          ]
        }
        maxHeight="none"
        newOpportunities={
          Array [
            Object {
              "course_id": "1",
              "due_at": "2017-03-09T20:40:35Z",
              "html_url": "http://www.non_default_url.com",
              "id": "1",
              "name": "learning object title",
            },
          ]
        }
        timeZone="America/Denver"
        togglePopover={[Function]}
      />
    </Popover>
    <Tray
      border={false}
      contentRef={[Function]}
      defaultFocusElement={null}
      insertAt="bottom"
      label="Add To Do"
      liveRegion={null}
      mountNode={null}
      onClose={[Function]}
      onDismiss={[Function]}
      onEnter={[Function]}
      onEntered={[Function]}
      onEntering={[Function]}
      onExit={[Function]}
      onExited={[Function]}
      onExiting={[Function]}
      onOpen={[Function]}
      open={false}
      placement="end"
      shadow={true}
      shouldCloseOnDocumentClick={false}
      shouldContainFocus={true}
      shouldReturnFocus={false}
      size="small"
    >
      <CloseButton
        as="button"
        cursor="pointer"
        margin="0"
        offset="x-small"
        onClick={[Function]}
        placement="start"
        screenReaderLabel="Close"
        size="small"
        type="button"
      />
      <UpdateItemTray
        courses={
          Array [
            Object {
              "id": "1",
              "longName": "Course Long Name",
              "shortName": "Course Short Name",
            },
          ]
        }
        locale="en"
        onDeletePlannerItem={[Function]}
        onSavePlannerItem={[Function]}
        timeZone="America/Denver"
      />
    </Tray>
    <Tray
      border={false}
      contentRef={[Function]}
      defaultFocusElement={null}
      insertAt="bottom"
      label="My Grades"
      liveRegion={null}
      mountNode={null}
      onClose={[Function]}
      onDismiss={[Function]}
      onEnter={[Function]}
      onEntered={[Function]}
      onEntering={[Function]}
      onExit={[Function]}
      onExited={[Function]}
      onExiting={[Function]}
      onOpen={[Function]}
      open={false}
      placement="end"
      shadow={true}
      shouldCloseOnDocumentClick={false}
      shouldContainFocus={true}
      shouldReturnFocus={true}
      size="small"
    >
      <View
        as="div"
        borderColor="primary"
        display="auto"
        focusColor="info"
        focusPosition="offset"
        overflowX="visible"
        overflowY="visible"
        padding="large large medium"
        position="static"
        shouldAnimateFocus={true}
        withVisualDebug={false}
      >
        <CloseButton
          as="button"
          cursor="pointer"
          margin="0"
          offset="x-small"
          onClick={[Function]}
          placement="start"
          screenReaderLabel="Close"
          size="small"
          type="button"
        />
        <GradesDisplay
          courses={
            Array [
              Object {
                "id": "1",
                "longName": "Course Long Name",
                "shortName": "Course Short Name",
              },
            ]
          }
          loading={false}
        />
      </View>
    </Tray>
    <Portal
      elementRef={[Function]}
      insertAt="bottom"
      mountNode={<div />}
      onClose={[Function]}
      onOpen={[Function]}
      open={false}
    >
      <StickyButton
        className="StickyButton-styles__newActivityButton"
        description="Scrolls up to the previous item with new activity."
        direction="up"
        elementRef={[Function]}
        id="new_activity_button"
        onClick={[Function]}
        zIndex={3}
      >
        New Activity
      </StickyButton>
    </Portal>
  </div>
</Fragment>
`;
