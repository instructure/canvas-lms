<!DOCTYPE html>
<html>
<head>
  <meta http-equiv=Content-type content="text/html; charset=utf-8">
  <title>Tests</title>
  <link rel="stylesheet" href="support/qunit/qunit.css" type="text/css">
  <style>
  code {
    font-size: 120%;
    background-color: rgba(255, 255, 255, 0.75);
  }
  #fixture {
    background: yellow;
    padding: 10px;
    margin: 10px 0;
    border: solid 1px #ccc;
  }
  </style>
</head>
<body>
  <h1 id="qunit-header">QUnit Test Suite</h1>
  <h2 id="qunit-banner"></h2>
  <div id="qunit-testrunner-toolbar"></div>
  <h2 id="qunit-userAgent"></h2>
  <ol id="qunit-tests"></ol>

  <div id="fixtures"></div>

  <script src="support/qunit/qunit.js"></script>
  <script src="support/sinon/sinon-1.17.2.js"></script>
  <script src="support/sinon/sinon-qunit-1.0.0.js"></script>
  <script>
    var require = {
      urlArgs: "bust=" +  (new Date()).getTime(),

      baseUrl: '../../public/javascripts',

      paths: <%= paths %>,

      // non-amd shims
      use: <%= shims %>,

      packages: [
        {
          name: 'jqueryui',
          location: 'vendor/jqueryui'
        },
        {
          name: 'helpers',
          location: '../../spec/javascripts/compiled/helpers',
          main: 'helpers',
          lib: './'
        },
        {
          name: 'support',
          location: '../../spec/javascripts/support',
          main: 'support',
          lib: './'
        },
        {
          name: 'spec',
          location: '../../spec'
        },
      ].concat(<%= packages %>)
    };
  </script>
  <script src="../../public/javascripts/vendor/require.js"></script>
  <script>
    // keep JSON.stingify from puking on dom nodes in testem
    (function() {
      var toString = Object.prototype.toString;
      QUnit.log(function(result) {
        if (result.actual instanceof HTMLElement) {
          result.actual = result.actual.toString();
          result.expected = result.expected.toString();
        }
        if (toString.call(result.actual) == '[object Array]') {
          for (var i = 0; i < result.actual.length; i++) {
            if (result.actual[i] instanceof HTMLElement) {
              result.actual[i] = result.actual[i].toString();
              result.expected[i] = result.expected[i].toString();
            }
          }
        }
      });
    })();

    // start loading specs now. if there's a callback by the time they finish
    // loading, execute it.
    var specsLoading = true;
    var onSpecsLoaded = null;
    require(<%=
      Dir[
        "public/javascripts/*[!bower]/#{matcher}",
        "spec/javascripts/compiled/#{matcher}",
        "spec/plugins/*/javascripts/compiled/#{matcher}"
      ].map{ |file| file.sub(/\.js$/, '').sub(/public\/javascripts\//, '') }.inspect
    %>, function() {
      specsLoading = false;
      if (onSpecsLoaded) onSpecsLoaded();
    });

    // don't try and start right when QUnit.load finishes. we want to check
    // spec loading status.
    QUnit.config.autostart = false;

    QUnit.begin(function() {
      // callback executed at start of QUnit.load, but we need to let it finish
      // first
      setTimeout(function() {
        // QUnit loaded and initialized. are the specs all loaded?
        if (specsLoading) {
          // if not, we need to wait for them before starting. fortunately, we
          // have a nifty onSpecsLoaded callback just for that.
          onSpecsLoaded = function() { QUnit.start(); };
        } else {
          // they are! get going
          QUnit.start();
        }
      });
    });
  </script>

</body>
</html>

