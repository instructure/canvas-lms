#!/usr/bin/env groovy

/*
 * Copyright (C) 2021 - present Instructure, Inc.
 *
 * This file is part of Canvas.
 *
 * Canvas is free software: you can redistribute it and/or modify it under
 * the terms of the GNU Affero General Public License as published by the Free
 * Software Foundation, version 3 of the License.
 *
 * Canvas is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU Affero General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Affero General Public License along
 * with this program. If not, see <http://www.gnu.org/licenses/>.
 */

final SYNC_IMAGES = [
  'docker/dockerfile:1.5.2': [
    platforms: ['linux/amd64', 'linux/arm64'],
    target: 'starlord.inscloudgate.net/jenkins/dockerfile:1.5.2',
  ],
  'selenium/hub:4.6': [
    platforms: ['linux/amd64'],
    target: 'starlord.inscloudgate.net/jenkins/selenium-hub:4.6'
  ],
  'selenium/node-chrome:107.0': [
    platforms: ['linux/amd64'],
    target: 'starlord.inscloudgate.net/jenkins/selenium-node-chrome:107.0'
  ]
]

pipeline {
  agent { label 'canvas-docker' }

  options {
    ansiColor('xterm')
    timestamps()
  }

  stages {
    stage('Calculate Changed Images') {
      steps {
        script {
          SYNC_IMAGES.each { srcTag, config ->
            def dstPlatforms = config['platforms']
            def dstTag = config['target']
            def platformImageList = ""

            dstPlatforms.each { dstPlatform ->
              def sanitizedPlatform = dstPlatform.replaceAll('/', '_')

              platformImageList = "${platformImageList} ${dstTag}-${sanitizedPlatform}"

              echo "ITERATE ${srcTag} -> ${dstTag} FOR ${dstPlatform}"

              sh """
                docker pull --platform $dstPlatform $srcTag
                docker pull $dstTag-$sanitizedPlatform || true
              """

              def srcImageId = sh(script: "docker images --filter=reference=$srcTag --format '{{.ID}}'", returnStdout: true).trim() ?: 'unknown'
              def dstImageId = sh(script: "docker images --filter=reference=$dstTag --format '{{.ID}}'", returnStdout: true).trim() ?: 'unknown'

              if (srcImageId == dstImageId) {
                slackSend(
                  channel: '#devx-alerts',
                  color: 'good',
                  message: "syncing image ${srcTag} (${srcImageId}) to ${dstTag} (${dstImageId}), no changes found"
                )
              } else {
                sh """
                  docker tag $srcTag $dstTag-$sanitizedPlatform
                  docker push $dstTag-$sanitizedPlatform
                """

                slackSend(
                  channel: '#devx-alerts',
                  color: 'warning',
                  message: "syncing image ${srcTag} (${srcImageId}) to ${dstTag} (${dstImageId}), changes found"
                )
              }

              echo "SRC ID $srcImageId"
              echo "DST ID $dstImageId"
            }

            sh """
            docker manifest create ${dstTag} ${platformImageList}
            docker manifest push ${dstTag}
            """
          }
        }
      }
    }
  }
}
