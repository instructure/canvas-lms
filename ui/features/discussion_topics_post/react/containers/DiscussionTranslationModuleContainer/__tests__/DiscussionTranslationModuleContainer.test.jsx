/*
 * Copyright (C) 2025 - present Instructure, Inc.
 *
 * This file is part of Canvas.
 *
 * Canvas is free software: you can redistribute it and/or modify it under
 * the terms of the GNU Affero General Public License as published by the Free
 * Software Foundation, version 3 of the License.
 *
 * Canvas is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU Affero General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Affero General Public License along
 * with this program. If not, see <http://www.gnu.org/licenses/>.
 */

import React from 'react'
import {render, screen, waitFor} from '@testing-library/react'
import userEvent from '@testing-library/user-event'
import { DiscussionTranslationModuleContainer } from '../DiscussionTranslationModuleContainer'
import { DiscussionManagerUtilityContext } from '../../../utils/constants'

const mockContextValue = {
  translateTargetLanguage: null,
  setTranslateTargetLanguage: jest.fn(),
  setShowTranslationControl: jest.fn(),
  entryTranslatingSet: new Set(),
  translationLanguages: { current: [
    { id: 'en', name: 'English', translated_to_name: 'Translated to English' },
    { id: 'es', name: 'Spanish', translated_to_name: 'Translated to Spanish' },
    { id: 'hu', name: 'Hungarian', translated_to_name: 'Translated to Hungarian' },
  ]}
}

describe('DiscussionTranslationModuleContainer', () => {
  beforeAll(() => {
    const node = document.createElement('div')
    node.setAttribute('role', 'alert')
    node.setAttribute('id', 'flash_screenreader_holder')
    document.body.appendChild(node)
  })

  beforeEach(() => {
    jest.clearAllMocks()
  })

  it('renders correctly with default state', () => {
    render(
      <DiscussionManagerUtilityContext.Provider value={mockContextValue}>
        <DiscussionTranslationModuleContainer />
      </DiscussionManagerUtilityContext.Provider>
    )

    expect(screen.getByText('Translate Discussion')).toBeInTheDocument()
    expect(screen.getByText(/generated by AI/i)).toBeInTheDocument()
    expect(screen.getByRole('button', { name: /translate/i })).toBeInTheDocument()
    expect(screen.getByRole('button', { name: /reset/i })).toBeInTheDocument()
  })

  it('closes translation module without having language selected', async () => {
    render(
      <DiscussionManagerUtilityContext.Provider value={{ ...mockContextValue }}>
        <DiscussionTranslationModuleContainer />
      </DiscussionManagerUtilityContext.Provider>
    )

    expect(screen.getByText('Translate Discussion')).toBeInTheDocument()
    const closeButton = screen.getByRole('button', { name: /close translations module/i })
    await userEvent.click(closeButton)
    expect(mockContextValue.setShowTranslationControl).toHaveBeenCalledWith(false)
  })

  it('shows modal when closing translation module with having a language selected', async () => {
    render(
      <DiscussionManagerUtilityContext.Provider value={{ ...mockContextValue, translateTargetLanguage: 'es' }}>
        <DiscussionTranslationModuleContainer />
      </DiscussionManagerUtilityContext.Provider>
    )

    expect(screen.getByText('Translate Discussion')).toBeInTheDocument()
    const closeButton = screen.getByRole('button', { name: /close translations module/i })
    await userEvent.click(closeButton)
    expect(mockContextValue.setShowTranslationControl).not.toHaveBeenCalled()

    expect(screen.getByText('Are you sure you want to close?')).toBeInTheDocument()
  })

  it('closes translation module closing modal with cancel button', async () => {
    render(
      <DiscussionManagerUtilityContext.Provider value={{ ...mockContextValue, translateTargetLanguage: 'es' }}>
        <DiscussionTranslationModuleContainer />
      </DiscussionManagerUtilityContext.Provider>
    )

    expect(screen.getByText('Translate Discussion')).toBeInTheDocument()
    const closeButton = screen.getByRole('button', { name: /close translations module/i })
    await userEvent.click(closeButton)
    expect(mockContextValue.setShowTranslationControl).not.toHaveBeenCalled()

    expect(screen.getByText('Are you sure you want to close?')).toBeInTheDocument()
    const modalCancelButton = screen.getByRole('button', { name: /cancel/i })
    await userEvent.click(modalCancelButton)

    await waitFor(async () => {
      expect(await screen.queryByText('Are you sure you want to close?')).not.toBeInTheDocument()
    })
  })

  it('closes translation module with keeping translations', async () => {
    render(
      <DiscussionManagerUtilityContext.Provider value={{ ...mockContextValue, translateTargetLanguage: 'es' }}>
        <DiscussionTranslationModuleContainer />
      </DiscussionManagerUtilityContext.Provider>
    )

    expect(screen.getByText('Translate Discussion')).toBeInTheDocument()
    const closeButton = screen.getByRole('button', { name: /close translations module/i })
    await userEvent.click(closeButton)
    expect(mockContextValue.setShowTranslationControl).not.toHaveBeenCalled()

    expect(screen.getByText('Are you sure you want to close?')).toBeInTheDocument()
    const closeAndKeepBUtton = screen.getByRole('button', { name: /close and keep translations/i })
    await userEvent.click(closeAndKeepBUtton)

    expect(mockContextValue.setShowTranslationControl).toHaveBeenCalledWith(false)
    expect(mockContextValue.setTranslateTargetLanguage).not.toHaveBeenCalled()

    await waitFor(async () => {
      expect(await screen.queryByText('Are you sure you want to close?')).not.toBeInTheDocument()
    })
  })

  it('closes translation module without keeping translations', async () => {
    render(
      <DiscussionManagerUtilityContext.Provider value={{ ...mockContextValue, translateTargetLanguage: 'es' }}>
        <DiscussionTranslationModuleContainer />
      </DiscussionManagerUtilityContext.Provider>
    )

    expect(screen.getByText('Translate Discussion')).toBeInTheDocument()
    const closeButton = screen.getByRole('button', { name: /close translations module/i })
    await userEvent.click(closeButton)
    expect(mockContextValue.setShowTranslationControl).not.toHaveBeenCalled()

    expect(screen.getByText('Are you sure you want to close?')).toBeInTheDocument()
    const closeAndKeepBUtton = screen.getByRole('button', { name: /close and remove translations/i })
    await userEvent.click(closeAndKeepBUtton)

    expect(mockContextValue.setShowTranslationControl).toHaveBeenCalledWith(false)
    expect(mockContextValue.setTranslateTargetLanguage).toHaveBeenCalledWith(null)

    await waitFor(async () => {
      expect(await screen.queryByText('Are you sure you want to close?')).not.toBeInTheDocument()
    })
  })

  it('shows error when translating without selecting a language', async () => {
    render(
      <DiscussionManagerUtilityContext.Provider value={mockContextValue}>
        <DiscussionTranslationModuleContainer />
      </DiscussionManagerUtilityContext.Provider>
    )

    const translateButton = screen.getByRole('button', { name: /translate/i })
    await userEvent.click(translateButton)

    expect(await screen.findByText('Please select a language.')).toBeInTheDocument()
  })

  it('allows selecting a language and translating', async () => {
    render(
      <DiscussionManagerUtilityContext.Provider value={mockContextValue}>
        <DiscussionTranslationModuleContainer />
      </DiscussionManagerUtilityContext.Provider>
    )

    const input = screen.getByPlaceholderText('Select a language...')
    await userEvent.click(input)
    const spanishOption = await screen.findByText('Spanish')
    await userEvent.click(spanishOption)

    const translateButton = screen.getByRole('button', { name: /translate/i })
    await userEvent.click(translateButton)

    expect(mockContextValue.setTranslateTargetLanguage).toHaveBeenCalledWith('es')
  })

  it('resets translation module', async () => {
    render(
      <DiscussionManagerUtilityContext.Provider value={mockContextValue}>
        <DiscussionTranslationModuleContainer />
      </DiscussionManagerUtilityContext.Provider>
    )

    const resetButton = screen.getByRole('button', { name: /reset/i })
    await userEvent.click(resetButton)

    expect(mockContextValue.setTranslateTargetLanguage).toHaveBeenCalledWith(null)
  })
})

