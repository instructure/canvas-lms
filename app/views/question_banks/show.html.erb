<%
  js_bundle :quizzes_bundle, :question_bank
  jammit_css :quizzes, :learning_outcomes, :tinymce
  content_for :page_title, @bank.title
%>
<% content_for :right_side do %>
  <div class="rs-margin-all">
    <% if can_do(@bank, @current_user, :manage) %>
      <a href="#" class="btn button-sidebar-wide add_question_link"><i class="icon-add"></i> <%= t 'buttons.add_a_question', "Add a Question" %></a>
      <a href="<%= context_url(@context, :context_question_bank_url, @bank.id) %>" class="btn button-sidebar-wide edit_bank_link"><i class="icon-edit"></i> <%= t 'buttons.edit', "Edit Bank Details" %></a>
      <a href="#" class="btn button-sidebar-wide move_questions_link"><i class="icon-arrow-right"></i> <%= t 'buttons.move_questions', "Move Multiple Questions" %></a>
      <a href="<%= context_url(@context, :context_question_bank_url, @bank.id) %>" class="btn button-sidebar-wide delete_bank_link"><i class="icon-end"></i> <%= t 'buttons.delete', "Delete Bank" %></a>
    <% end %>
    <% if @bank && !@bank.bookmarked_for?(@current_user) %>
      <a href="<%= context_url(@context, :context_question_bank_bookmark_url, @bank ? @bank.id : "{{ id }}") %>" class="btn button-sidebar-wide bookmark_bank_link"><%= image_tag "bookmark_gray.png" %> <span class="message"><%= t 'buttons.bookmark', "Bookmark this Bank" %></span></a>
    <% else %>
      <button class="btn button-sidebar-wide disabled" disabled="true"><%= image_tag "bookmark.png" %> <%= t 'buttons.already_bookmarked', "Already Bookmarked" %></button>
    <% end %>
  </div>
  <h2 id="aligned_outcomes"><%= t 'headings.aligned_outcomes', "Aligned Outcomes" %></h2>
  <div class="rs-margin-lr rs-margin-bottom">
    <ul class="unstyled_list" id="aligned_outcomes_list">
      <% @alignments.each do |alignment| %>
        <li class="outcome" data-id="<%= alignment.learning_outcome_id %>">
          <span class="short_description"><%= alignment.learning_outcome.short_description %></span>
          <a href="#" class="delete_outcome_link no-hover"><i class="icon-end standalone-icon"></i></a>
          <span class="clear"></span>
          <span class="content"><%= t :mastery_threshold, "mastery at %{threshold_percentage}", :threshold_percentage => raw("<span class=\"mastery_threshold\">#{(alignment.mastery_score || 0) * 100.0}</span>%") %></span>
        </li>
      <% end %>
      <li class="blank outcome" style="display: none;">
        <span class="short_description">&nbsp;</span>
        <a href="#" class="delete_outcome_link no-hover"><i class="icon-end standalone-icon"></i></a>
        <span class="clear"></span>
        <span class="content"><%= t :mastery_threshold, "mastery at %{threshold_percentage}", :threshold_percentage => raw("<span class=\"mastery_threshold\">&nbsp;</span>%") %></span>
      </li>
    </ul>
    <a href="#" class="btn button-sidebar-wide add_outcome_link"><i class="icon-paperclip"></i> <span class="add_outcome_text"><%= t 'links.align_outcome', "Align Outcome" %></span></a>
  </div>
  <%= render :partial => 'shared/find_outcome', :locals => {:purpose => 'question_bank'}  %>
<% end %>

<div class="quiz-header">
  <% form_for @bank, :url => context_url(@context, :context_question_bank_url), :html => {:id => "edit_bank_form", :method => :put} do |f| %>
    <div class="displaying">
      <h2><%= @bank.title %></h2>
    </div>
    <div class="editing" style="display: none;">
      <b><%= f.label :title, :en => "Bank Name" %></b>
      <%= f.text_field :title, :class => "bank_name_box" %>
    </div>
  <% end %>
  <p>
    <%= t('edit_warning', "Remember, changes to question templates won't automatically update quizzes that are already using those questions.") %>
  </p>
  <div style="margin-bottom: 5px; <%= hidden if @questions.total_pages > 1 %>">
    <input type="checkbox" id="show_question_details" <%= 'checked' if @questions.total_pages > 1 %> /><label for="show_question_details"> <%= t('show_details', 'Show Question Details') %></label>
  </div>
  <div id="bank_urls" style="display: none;">
    <a href="<%= context_url(@context, :context_question_bank_questions_url, @bank, :page => "{{ page }}") %>" class="more_questions_url">&nbsp;</a>
    <a href="<%= context_url(@context, :context_question_bank_assessment_questions_url, @bank) %>" class="add_question_url">&nbsp;</a>
    <a href="<%= context_url(@context, :context_question_bank_assessment_question_move_question_url, "{{ id }}") %>" class="move_question_url">&nbsp;</a>
    <a href="<%= context_url(@context, :context_question_bank_move_questions_url, @bank.id) %>" class="move_questions_url">&nbsp;</a>
    <a href="<%= context_url(@context, :context_question_banks_url) %>" class="assessment_question_banks_url">&nbsp;</a>
    <a href="<%= context_url(@context, :context_question_banks_url, :managed => '1') %>" class="managed_banks_url">&nbsp;</a>
    <a href="<%= context_url(@context, :context_question_bank_reorder_url, @bank.id) %>" class="reorder_questions_url" style="display: none;">&nbsp;</a>
    <span class="current_question_bank_id"><%= @bank.id %></span>
  </div>
</div>
<div id="questions" class="<%= 'uneditable' unless can_do(@bank, @current_user, :manage) %> question_editing brief question_bank">
  <% if @questions.total_pages <= 1 %>
    <% @questions.each do |question| %>
      <%= render :partial => "quizzes/display_question", :object => question.data, :locals => {:question_bank_id => @bank.id, :editing => true, :asset_string => question.asset_string} %>
    <% end %>
  <% else %>
    <%= render :partial => "question_teaser", :collection => @questions %>
  <% end %>
</div>

<% if @questions.total_pages > 1 %>
  <div id="more_questions" data-current-page="1" data-total-pages="<%= @questions.total_pages %>" style="font-size: 1.2em; font-weight: bold; text-align: center;">
    <a href="<%= context_url(@context, :context_question_bank_questions_url, @bank, :page => "{{ page }}") %>" class="more_questions_link"><%= t 'links.more_questions', "more questions" %></a>
  </div>
<% end %>

<%= render :partial => "question_teaser" %>
<%= render :partial => "question_bank" %>
<%= render :partial => "quizzes/display_question", :object => nil, :locals => {:question_bank_id => @bank.id, :editing => true} %>
<%= render :partial => "quizzes/display_answer", :object => nil %>
<%= render :partial => "quizzes/form_answer", :object => nil %>
<%= render :partial => "quizzes/form_question", :object => nil, :locals => {:question_bank_id => @bank.id} %>
<span class="question_bank_id" style="display: none;"><%= @bank.id %></span>
<div style="display: none;">
  <div id="move_question_dialog">
    <input type="hidden" name="multiple_questions" class="multiple_questions" value="0"/>
    <div style="font-weight: bold;"><%= t 'move_copy', 'Move/Copy' %>
      <span class="question_name">&nbsp;</span>
    </div>
    <div class="question_text"></div>
    <ul class="unstyled_list questions" style="display: none;">
      <li class="list_question blank" style="display: none;">
        <input type="checkbox" id="list_question" class="list_question_checkbox"/>
        <label for="list_question" class="list_question_name"></label>
        <div class="list_question_text">
        </div>
      </li>
    </ul>
    <div style="margin-top: 10px;">
      <%= t 'select_bank', 'Select the destination question bank for this question:' %>
    </div>
    <ul class="unstyled_list banks">
      <li class="message">
        <%= t 'loading_banks', 'Loading banks...' %>
      </li>
      <li class="bank blank" style="display: none;">
        <input type="radio" class="bank_radio" name="assessment_question_bank_id" value="new" id="bank_new"/>
        <label for="bank_new" class="bank_label">
          <span class="bank_name">[ <%= t 'labels.new_question_bank', 'New Question Bank' %> ]</span>
          <span class="context_name">&nbsp;</span>
        </label>
        <div class="clear"></div>
      </li>
    </ul>
    <div class="new_question_bank_name" style="display: none;">
      <label for="new_question_bank_name"><%= before_label 'new_bank_name', 'New Bank Name' %></label>
      <input type="text" name="assessment_question_bank_name" value="" id="new_question_bank_name">
    </div>
    <div class="copy_option">
      <input type="checkbox" name="copy" id="copy_question" value="1" checked />
      <label for="copy_question"><%= t 'labels.keep_copy', 'Keep a copy in this question bank as well' %></label>
    </div>
    <div class="button-container">
      <button type="button" class="btn submit_button"><%= t 'button.move_copy_question', 'Move/Copy Question' %></button>
      <button type="button" class="btn cancel_button btn button-secondary"><%= t 'button.cancel', 'Cancel' %></button>
    </div>
  </div>
</div>
<div id="assessment_question_bank_id" style="display: none;"><%= @bank.id %></div>

<% js_block do %>
<script>
require([
  'i18nObj' /* I18n.t */,
  'jquery' /* $ */,
  'jst/quiz/move_question',
  'jquery.ajaxJSON' /* ajaxJSON */,
  'jquery.instructure_forms' /* formSubmit, getFormData, formErrors */,
  'jqueryui/dialog',
  'jquery.instructure_misc_helpers' /* replaceTags */,
  'jquery.instructure_misc_plugins' /* confirmDelete, showIf */,
  'jquery.keycodes' /* keycodes */,
  'jquery.loadingImg' /* loadingImage */,
  'jquery.templateData' /* fillTemplateData, getTemplateData */
], function(I18n, $, moveQuestion) {

$(document).ready(function() {
  if($("#more_questions").length > 0) {
    $(".display_question .move").remove();
    var url = $.replaceTags($("#bank_urls .more_questions_url").attr('href'), 'page', 1);
    $.ajaxJSON(url, 'GET', {}, function(data) {
      for(var idx in data.questions) {
        var question = data.questions[idx].assessment_question;
        var $teaser = $("#question_teaser_" + question.id);
        $teaser.data('question', question);
      }
    }, function(data) {
    });
  }
  $(".more_questions_link").click(function(event) {
    event.preventDefault();
    if($(this).hasClass('loading')) { return; }
    var $link = $(this);
    var $more_questions = $("#more_questions");
    var currentPage = parseInt($more_questions.attr('data-current-page'));
    var totalPages = parseInt($more_questions.attr('data-total-pages'));
    var url = $(this).attr('href');
    url = $.replaceTags(url, 'page', currentPage + 1);
    $link.text("loading more questions...").addClass('loading');
    $.ajaxJSON(url, 'GET', {}, function(data) {
      $link.text(<%= jt('links.more_questions', "more questions") %>).removeClass('loading');
      $more_questions.attr('data-current-page', currentPage + 1);
      $more_questions.showIf(currentPage + 1 < totalPages);
      for(var idx in data.questions) {
        var question = data.questions[idx].assessment_question;
        question.assessment_question_id = question.id;
        var $question = $("#question_teaser_blank").clone().removeAttr('id');
        $question.fillTemplateData({
          data: question,
          id: 'question_teaser_' + question.id,
          hrefValues: ['id']
        });
        $question.fillTemplateData({
          data: question.question_data,
          htmlValues: ['question_text']
        });
        $question.data('question', question);
        $("#questions").append($question);
        $question.show();
      }
    }, function() {
      $link.text(<%= jt('loading_more_fail', "loading more questions fails, please try again") %>).removeClass('loading');
    });
  });
  $(".delete_bank_link").click(function(event) {
    event.preventDefault();
    $(this).parents(".question_bank").confirmDelete({
      url: $(this).attr('href'),
      message: <%= jt('delete_are_you_sure', "Are you sure you want to delete this bank of questions?") %>,
      success: function() {
        location.href = $(".assessment_question_banks_url").attr('href');
      }
    });
  });
  $(".bookmark_bank_link").click(function(event) {
    event.preventDefault();
    var $link = $(this);
    $link.find(".message").text(<%= jt('bookmarking', "Bookmarking...") %>);
    $.ajaxJSON($(this).attr('href'), 'POST', {}, function(data) {
      $link.find('.message').text(<%= jt('already_bookmarked', 'Already Bookmarked') %>);
      $link.find("img").attr('src', $link.find("img").attr('src').replace("bookmark_gray.png", "bookmark.png"));
      $link.attr('disabled', true);
    }, function() {
      $link.find(".message").text(<%= jt('bookmark_failed', "Bookmark Failed") %>);
    });
  });
  $(".edit_bank_link").click(function(event) {
    event.preventDefault();
    var val = $("#edit_bank_form h2").text();
    $("#edit_bank_form").find(".displaying").hide().end()
      .find(".editing").show();
    $(".bank_name_box").val(val || <%= jt('question_bank', "Question Bank") %>).focus().select();
  });
  $("#edit_bank_form .bank_name_box").keycodes('return esc', function(event) {
    if(event.keyString == 'esc') {
      $(this).blur();
    } else if(event.keyString == 'return') {
      $("#edit_bank_form").submit();
    }
  });
  $("#edit_bank_form .bank_name_box").blur(function() {
    $("#edit_bank_form").find(".displaying").show().end()
      .find(".editing").hide();
  });
  $("#edit_bank_form").formSubmit({
    object_name: 'assessment_question_bank',
    beforeSubmit: function(data) {
      $("#edit_bank_form h2").text(data.title);
      $(this).loadingImage();
    },
    success: function(data) {
      $(this).loadingImage('remove');
      var bank = data.assessment_question_bank;
      $("#edit_bank_form .bank_name_box").blur();
      $("#edit_bank_form h2").text(bank.title);
    },
    error: function(data) {
      $(this).loadingImage('remove');
      $(".edit_bank_link").click();
      $("#edit_bank_form").formErrors(data);
    }
  });
  $("#show_question_details").change(function() {
    $("#questions").toggleClass('brief', !$(this).attr('checked'));
  }).change();
  var addBank = function(bank) {
    var current_question_bank_id = $("#bank_urls .current_question_bank_id").text();
    if(bank.id == current_question_bank_id) { return; }
    var $dialog = $("#move_question_dialog");
    var $bank = $dialog.find("li.bank.blank:first").clone(true).removeClass('blank');

    $bank.find("input").attr('id', "question_bank_" + bank.id).val(bank.id);
    $bank.find("label").attr('for', "question_bank_" + bank.id)
      .find(".bank_name").text(bank.title || <%= jt('default_name', "No Name") %>).end()
      .find(".context_name").text(bank.cached_context_short_name);
    $bank.show().insertBefore($dialog.find("ul.banks .bank.blank:last"));
  };
  var loadBanks = function() {
    var url = $("#bank_urls .managed_banks_url").attr('href');
    var $dialog = $("#move_question_dialog");
    $dialog.find("li.message").text(<%= jt('loading_banks', "Loading banks...") %>);
    $.ajaxJSON(url, 'GET', {}, function(data) {
      for(var idx = 0; idx < data.length; idx++) {
        addBank(data[idx].assessment_question_bank);
      }
      $dialog.addClass('loaded');
      $dialog.find("li.bank.blank").show();
      $dialog.find("li.message").hide();
    }, function(data) {
      $dialog.find("li.message").text(<%= jt("error_loading_banks", "Error loading banks") %>);
    });
  };

  var moveQuestions = {
    elements: {
      $dialog: $('#move_question_dialog'),
      $loadMessage: $('<li />').append(<%= jt('load_questions', 'Loading Questions...') %>),
      $questions: $('#move_question_dialog .questions')
    },
    messages: {
      move_copy_questions: <%= jt('title.move_copy_questions', "Move/Copy Questions") %>,
      move_questions: <%= jt('move_questions', 'Move Questions') %>,
      multiple_questions: <%= jt('multiple_questions', 'Multiple Questions') %>
    },
    page: 1,
    addEvents: function(){
      $('.move_questions_link').bind('click.moveQuestions', $.proxy(this.onClick, this));
      return this;
    },
    onClick: function(e){
      e.preventDefault();
      this.prepDialog();
      this.showDialog()
      this.loadData();
    },
    prepDialog: function(){
      this.elements.$dialog.find('.question_text').hide();
      this.elements.$questions.show();
      this.elements.$questions.find('.list_question:not(.blank)').remove();
      this.elements.$dialog.find('.question_name').text(this.messages.multiple_questions);
      this.elements.$dialog.find('.copy_option').hide().find(':checkbox').attr('checked', false);
      this.elements.$dialog.find('.submit_button').text(this.messages.move_questions);
      this.elements.$dialog.find('.multiple_questions').val('1');
      this.elements.$dialog.data('question', null);
    },
    showDialog: function(){
      if (!this.elements.$dialog.hasClass('loaded')){
        loadBanks(this.elements.$dialog);
      } else {
        this.elements.$dialog.find('li message').hide();
      }

      this.elements.$dialog.dialog({
        title: this.messages.move_copy_questions,
        width: 600
      });
    },
    loadData: function(){
      this.elements.$questions.append(this.elements.$loadMessage);
      $.ajaxJSON(window.location.href + '/questions?page=' + this.page, 'GET', {}, $.proxy(this.onData, this));
    },
    onData: function(data){
      var questions = moveQuestion(data);
      this.elements.$loadMessage.remove();
      this.elements.$questions.append(questions);
      if (this.page < data.pages){
        this.elements.$questions.append(this.elements.$loadMessage);
        this.page += 1;
        this.loadData();
      } else {
        this.page = 1;
      }
    }
  }.addEvents();

  $("#questions").delegate(".move_question_link", 'click', function(event) {
    event.preventDefault();
    var $dialog = $("#move_question_dialog");
    $dialog.find(".question_text").show().end()
      .find(".questions").hide();
    $dialog.find(".copy_option").show();
    $dialog.find(".submit_button").text(<%= jt('title.move_copy_questions', "Move/Copy Questions") %>);
    $dialog.find(".multiple_questions").val("0");
    if(!$dialog.hasClass('loaded')) {
      loadBanks($dialog);
    } else {
      $dialog.find("li.message").hide();
    }
    var template = $(this).parents(".question_holder").getTemplateData({textValues: ['question_name', 'question_text']});
    $dialog.fillTemplateData({
      data: template
    });
    $dialog.data('question', $(this).parents(".question_holder"));
    $dialog.dialog({
      width: 600,
      title: <%= jt('title.move_copy_questions', "Move/Copy Questions") %>
    });
  });
  $("#move_question_dialog .submit_button").click(function() {
    var $dialog = $("#move_question_dialog");
    var data = $dialog.getFormData();
    var multiple_questions = data.multiple_questions == '1';
    var move = data.copy != '1';
    var submitText = null;
    if(move){
      submitText = <%= jt("buttons.submit_moving", {:one => "Moving Question...", :other => "Moving Questions..."}, '{count:(multiple_questions ? 2 : 1)}') %>
    } else {
      submitText = <%= jt("buttons.submit_copying", {:one => "Copying Question...", :other => "Copying Questions..."}, '{count:(multiple_questions ? 2 : 1)}') %>
    }
    $dialog.find("button").attr('disabled', true);
    $dialog.find(".submit_button").text(submitText);
    var url = $("#bank_urls .move_questions_url").attr('href');
    data['move'] = move ? '1' : '0';
    if(!multiple_questions) {
      var id = $dialog.data('question').find(".assessment_question_id").text();
      data['questions[' + id + ']'] = '1';
    }
    var ids = [];
    $dialog.find(".list_question :checkbox:checked").each(function() {
      ids.push($(this).val());
    });
    var save = function(data) {
      $.ajaxJSON(url, 'POST', data, function(data) {
        $dialog.find("button").attr('disabled', false);
        $dialog.find(".submit_button").text("Move/Copy Question");
        if(move) {
          if($dialog.data('question')) {
            $dialog.data('question').remove();
          } else {
            for(var idx in ids) {
              var id = ids[idx];
              $("#question_" + id).parent(".question_holder").remove();
              $("#question_teaser_" + id).remove();
            }
            $dialog.find
          }
        }
        $dialog.dialog('close');
      }, function(data) {
        $dialog.find("button").attr('disabled', false);
        var failedText = null;
        if(move){
          failedText = <%= jt("buttons.submit_moving_failed", {:one => "Moving Question Failed, please try again", :other => "Moving Questions Failed, please try again"}, '{count:(multiple_questions ? 2 : 1)}') %>
        } else {
          failedText = <%= jt("buttons.submit_copying_failed", {:one => "Copying Question Failed, please try again", :other => "Copying Questions Failed, please try again"}, '{count:(multiple_questions ? 2 : 1)}') %>
        }
        $dialog.find(".submit_button").text(failedText);
      });
    }
    if(data.assessment_question_bank_id == "new") {
      var create_url = $("#bank_urls .assessment_question_banks_url").attr('href');
      $.ajaxJSON(create_url, 'POST', {'assessment_question_bank[title]': data.assessment_question_bank_name}, function(bank_data) {
        addBank(bank_data.assessment_question_bank);
        data['assessment_question_bank_id'] = bank_data.assessment_question_bank.id;
        $dialog.find(".new_question_bank_name").hide();
        save(data);
      }, function(data) {
        $dialog.find("button").attr('disabled', false);
        var submitAgainText = null;
        if(move){
          submitAgainText = <%= jt("buttons.submit_retry_moving", "Moving Question Failed, please try again...") %>
        } else {
          submitAgainText = <%= jt("buttons.submit_retry_copying", "Copying Question Failed, please try again...") %>
        }
        $dialog.find(".submit_button").text(submitAgainText);
      });
    } else {
      save(data);
    }
  });
  $("#move_question_dialog .cancel_button").click(function() {
    $("#move_question_dialog").dialog('close');
  });
  $("#move_question_dialog :radio").change(function() {
    $("#move_question_dialog .new_question_bank_name").showIf($(this).attr('checked') && $(this).val() == 'new');
  });
});
});
</script>
<% end %>
<% content_for :stylesheets do %>
<style>
#move_question_dialog .question_name {
}
#move_question_dialog .question_text {
  font-size: 0.8em;
  margin-left: 20px;
}
#move_question_dialog ul.questions {
  margin: 5px 20px;
  overflow: auto;
  min-height: 50px;
  max-height: 200px;
}
#move_question_dialog ul.questions .list_question .list_question_text {
  padding-left: 30px;
  color: #666;
  font-size: 0.8em;
  max-height: 1.7em;
  overflow: hidden;
}

#move_question_dialog ul.banks {
  margin: 5px 20px;
  overflow: auto;
  min-height: 30px;
  max-height: 150px;
}
#move_question_dialog li.bank {
  margin-bottom: 5px;
}
#move_question_dialog li.bank .bank_label {
  float: left;
}
#move_question_dialog li.bank .bank_radio {
  float: left;
}
#move_question_dialog li.bank .bank_label .bank_name {
  font-weight: bold;
  display: block;
}
#move_question_dialog li.bank .bank_label .context_name {
  font-size: 0.8em;
  display: block;
  padding-left: 10px;
  color: #888;
}
#questions.uneditable .question_holder .display_question .move {
  display: none;
}
#questions.uneditable .question_holder .display_question .links {
  display: none;
}
.bottom_links {
  text-align: right;
  margin-right: 10px;
  clear: left;
}
#questions.uneditable .question_holder .display_question .bottom_links {
  display: none;
}
</style>
<% end %>
<%= render :partial => 'quizzes/equations_help' %>
