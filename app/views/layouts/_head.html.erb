<%
# Copyright (C) 2012 - present Instructure, Inc.
#
# This file is part of Canvas.
#
# Canvas is free software: you can redistribute it and/or modify it under
# the terms of the GNU Affero General Public License as published by the Free
# Software Foundation, version 3 of the License.
#
# Canvas is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE. See the GNU Affero General Public License for more
# details.
#
# You should have received a copy of the GNU Affero General Public License along
# with this program. If not, see <http://www.gnu.org/licenses/>.
%>

<%-
  @locale = raw I18n.locale.to_json
  @body_classes ||= []
  @body_classes << "context-#{@context.asset_string}" if @context
  yield :pre_html

-%><!DOCTYPE html>
<html class="scripts-not-loaded" lang=<%= @locale %>>
<head>
  <meta charset="utf-8">
  <title><%= (yield :page_title).presence || @page_title || t('default_page_title', "Canvas LMS") %></title>
  <!--[if lte IE 9]> <meta http-equiv=refresh content="0; URL=/ie-9-is-not-supported.html" /> <![endif]-->
  <%= favicon_link_tag(favicon) %>
  <%= favicon_link_tag(brand_variable('ic-brand-apple-touch-icon'), rel: 'apple-touch-icon', type: nil) %>
  <%= yield :auto_discovery %>
  <%= yield :head %>
  <%=
    # polyfill browsers that don't have a baseline of features we use like Promise or Object.assign
    polyfill_url = "vendor/ie11-polyfill.js"
    if request.user_agent.to_s =~ /Trident\/7.0.*rv:11/i
      # If it looks like IE11, assume they are going to need the polyfill
      # and serve it to them in the more performant way
      javascript_include_tag(polyfill_url)
    else
      # For other browsers, feature-detect for all the stuff we polyfill and
      # still provide a fallback if they don't have it.
      # The crazy string concatenation in the document.write is to trick Chrome
      # into not preemptively downloading it anyway.
      javascript_tag(%(
!function(){
  var o,s,v;
  if (!(window.Promise && Object.assign && [].find && [].includes && (o={},s=Symbol(),v={},o[s]=v,o[s]===v) && (function f(){}).bind().name==='bound f')) {
    s = 's', document.write('<'+s+'cr'+'ipt src="#{javascript_path(polyfill_url)}"></'+s+'c'+'ript>');
  }
}();
      ))
    end
  %>
  <%=
    # Load the fontface observer for lato async and as fast as possible so it doesn't flicker with fallback font.
    # That's why we don't load it in a 'require' at the bottom of the page
    javascript_include_tag("vendor/lato-fontfaceobserver.js", async: true)
  %>
  <%= yield :meta_tags %>
  <%= include_custom_meta_tags %>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <meta name="theme-color" content="<%= brand_variable('ic-brand-primary') %>">
  <%= include_css_bundles %>
  <%= yield :stylesheets %>
  <%= include_account_css %>
  <script>
    <%# 
      listen for any clicks on links that have href="#" or data-method set and queue them to be fired on dom ready.
      note: the events targeted for a[data-method] elems don't get properly replayed, but
      at least we can gobble them up here to prevent errors.
    %>
    function _earlyClick(e){
      var c = e.target
      while (c && c.ownerDocument) {
        if (c.getAttribute('href') == '#' || c.getAttribute('data-method')) {
          e.preventDefault()
          (_earlyClick.clicks = _earlyClick.clicks || []).push(c)
          break
        }
        c = c.parentNode
      }
    }
    document.addEventListener('click', _earlyClick)
  </script>
  <%= javascript_include_tag(active_brand_config_js_url, defer: true) %>
  <%= include_head_js %>
</head>
