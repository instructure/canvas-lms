// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`renders correctly expanded 1`] = `
<ToggleGroup
  as="span"
  border={false}
  defaultExpanded={false}
  elementRef={[Function]}
  expanded={true}
  icon={[Function]}
  iconExpanded={[Function]}
  onToggle={[Function]}
  size="medium"
  summary={
    <Flex
      as="span"
      data-selenium="outcome"
      direction="row"
      elementRef={[Function]}
      inline={false}
      justifyItems="space-between"
      visualDebug={false}
      wrapItems={false}
    >
      <FlexItem
        as="span"
        elementRef={[Function]}
        grow={false}
        shrink={true}
      >
        <Flex
          as="span"
          direction="column"
          elementRef={[Function]}
          inline={false}
          justifyItems="start"
          visualDebug={false}
          wrapItems={false}
        >
          <FlexItem
            as="span"
            elementRef={[Function]}
            grow={false}
            shrink={false}
          >
            <Text
              as="span"
              letterSpacing="normal"
              size="medium"
              wrap="normal"
            >
              <Flex
                as="span"
                direction="row"
                elementRef={[Function]}
                inline={false}
                justifyItems="start"
                visualDebug={false}
                wrapItems={false}
              >
                <FlexItem
                  as="span"
                  elementRef={[Function]}
                  grow={false}
                  shrink={false}
                >
                  <OutcomePopover
                    outcome={
                      Object {
                        "assignments": Array [
                          Object {
                            "assignment_id": 1,
                            "learning_outcome_id": 1,
                            "submission_types": "online_quiz",
                            "title": "My assignment",
                            "url": "www.example.com",
                          },
                        ],
                        "calculation_method": "highest",
                        "expansionId": 100,
                        "id": 1,
                        "mastered": false,
                        "mastery_points": 3,
                        "points_possible": 5,
                        "ratings": Array [
                          Object {
                            "description": "My first rating",
                          },
                          Object {
                            "description": "My second rating",
                          },
                        ],
                        "results": Array [
                          Object {
                            "assignment": Object {
                              "id": "live_assessments/assessment_1",
                              "name": "My assessment",
                              "score": 0,
                              "submission_types": "magic_marker",
                            },
                            "id": 2,
                            "percent": 0.1,
                            "score": 1,
                            "submitted_or_assessed_at": "2019-02-01T07:01:00.000Z",
                          },
                          Object {
                            "assignment": Object {
                              "html_url": "http://foo",
                              "id": "assignment_1",
                              "name": "My assignment",
                              "score": 0,
                              "submission_types": "online_quiz",
                            },
                            "id": 1,
                            "percent": 0.1,
                            "score": 1,
                            "submitted_or_assessed_at": "2018-02-01T07:01:00.000Z",
                          },
                        ],
                        "score": 1,
                        "title": "My outcome",
                      }
                    }
                    outcomeProficiency={null}
                  />
                </FlexItem>
                <FlexItem
                  as="span"
                  elementRef={[Function]}
                  grow={false}
                  padding="0 x-small"
                  shrink={true}
                >
                  <TruncateText
                    debounce={0}
                    ellipsis="â€¦"
                    ignore={
                      Array [
                        " ",
                        ".",
                        ",",
                      ]
                    }
                    maxLines={1}
                    onUpdate={[Function]}
                    position="end"
                    truncate="character"
                  >
                    My outcome
                  </TruncateText>
                </FlexItem>
              </Flex>
            </Text>
          </FlexItem>
          <FlexItem
            as="span"
            elementRef={[Function]}
            grow={false}
            shrink={false}
          >
            <Text
              as="span"
              letterSpacing="normal"
              size="small"
              wrap="normal"
            >
              1 alignment
            </Text>
          </FlexItem>
        </Flex>
      </FlexItem>
      <FlexItem
        as="span"
        elementRef={[Function]}
        grow={false}
        shrink={false}
      >
        <span>
          <PresentationContent
            as="span"
          >
            <Text
              as="span"
              letterSpacing="normal"
              size="medium"
              wrap="normal"
            >
              1
              /
              5
            </Text>
          </PresentationContent>
          <ScreenReaderContent
            as="span"
          >
            1 out of 5 points
          </ScreenReaderContent>
        </span>
        <Pill
          margin="0 0 0 x-small"
          text="Not mastered"
          variant="default"
        />
      </FlexItem>
    </Flex>
  }
  toggleLabel="Toggle alignment details for My outcome"
  transition={true}
>
  <List
    as="ul"
    delimiter="dashed"
    margin="none"
    size="medium"
    variant="unstyled"
  >
    <ListItem
      key="2"
    >
      <AssignmentResult
        outcome={
          Object {
            "assignments": Array [
              Object {
                "assignment_id": 1,
                "learning_outcome_id": 1,
                "submission_types": "online_quiz",
                "title": "My assignment",
                "url": "www.example.com",
              },
            ],
            "calculation_method": "highest",
            "expansionId": 100,
            "id": 1,
            "mastered": false,
            "mastery_points": 3,
            "points_possible": 5,
            "ratings": Array [
              Object {
                "description": "My first rating",
              },
              Object {
                "description": "My second rating",
              },
            ],
            "results": Array [
              Object {
                "assignment": Object {
                  "id": "live_assessments/assessment_1",
                  "name": "My assessment",
                  "score": 0,
                  "submission_types": "magic_marker",
                },
                "id": 2,
                "percent": 0.1,
                "score": 1,
                "submitted_or_assessed_at": "2019-02-01T07:01:00.000Z",
              },
              Object {
                "assignment": Object {
                  "html_url": "http://foo",
                  "id": "assignment_1",
                  "name": "My assignment",
                  "score": 0,
                  "submission_types": "online_quiz",
                },
                "id": 1,
                "percent": 0.1,
                "score": 1,
                "submitted_or_assessed_at": "2018-02-01T07:01:00.000Z",
              },
            ],
            "score": 1,
            "title": "My outcome",
          }
        }
        outcomeProficiency={null}
        result={
          Object {
            "assignment": Object {
              "id": "live_assessments/assessment_1",
              "name": "My assessment",
              "score": 0,
              "submission_types": "magic_marker",
            },
            "id": 2,
            "percent": 0.1,
            "score": 1,
            "submitted_or_assessed_at": "2019-02-01T07:01:00.000Z",
          }
        }
      />
    </ListItem>
    <ListItem
      key="1"
    >
      <AssignmentResult
        outcome={
          Object {
            "assignments": Array [
              Object {
                "assignment_id": 1,
                "learning_outcome_id": 1,
                "submission_types": "online_quiz",
                "title": "My assignment",
                "url": "www.example.com",
              },
            ],
            "calculation_method": "highest",
            "expansionId": 100,
            "id": 1,
            "mastered": false,
            "mastery_points": 3,
            "points_possible": 5,
            "ratings": Array [
              Object {
                "description": "My first rating",
              },
              Object {
                "description": "My second rating",
              },
            ],
            "results": Array [
              Object {
                "assignment": Object {
                  "id": "live_assessments/assessment_1",
                  "name": "My assessment",
                  "score": 0,
                  "submission_types": "magic_marker",
                },
                "id": 2,
                "percent": 0.1,
                "score": 1,
                "submitted_or_assessed_at": "2019-02-01T07:01:00.000Z",
              },
              Object {
                "assignment": Object {
                  "html_url": "http://foo",
                  "id": "assignment_1",
                  "name": "My assignment",
                  "score": 0,
                  "submission_types": "online_quiz",
                },
                "id": 1,
                "percent": 0.1,
                "score": 1,
                "submitted_or_assessed_at": "2018-02-01T07:01:00.000Z",
              },
            ],
            "score": 1,
            "title": "My outcome",
          }
        }
        outcomeProficiency={null}
        result={
          Object {
            "assignment": Object {
              "html_url": "http://foo",
              "id": "assignment_1",
              "name": "My assignment",
              "score": 0,
              "submission_types": "online_quiz",
            },
            "id": 1,
            "percent": 0.1,
            "score": 1,
            "submitted_or_assessed_at": "2018-02-01T07:01:00.000Z",
          }
        }
      />
    </ListItem>
  </List>
</ToggleGroup>
`;

exports[`renders correctly expanded with no results 1`] = `
<ToggleGroup
  as="span"
  border={false}
  defaultExpanded={false}
  elementRef={[Function]}
  expanded={true}
  icon={[Function]}
  iconExpanded={[Function]}
  onToggle={[Function]}
  size="medium"
  summary={
    <Flex
      as="span"
      data-selenium="outcome"
      direction="row"
      elementRef={[Function]}
      inline={false}
      justifyItems="space-between"
      visualDebug={false}
      wrapItems={false}
    >
      <FlexItem
        as="span"
        elementRef={[Function]}
        grow={false}
        shrink={true}
      >
        <Flex
          as="span"
          direction="column"
          elementRef={[Function]}
          inline={false}
          justifyItems="start"
          visualDebug={false}
          wrapItems={false}
        >
          <FlexItem
            as="span"
            elementRef={[Function]}
            grow={false}
            shrink={false}
          >
            <Text
              as="span"
              letterSpacing="normal"
              size="medium"
              wrap="normal"
            >
              <Flex
                as="span"
                direction="row"
                elementRef={[Function]}
                inline={false}
                justifyItems="start"
                visualDebug={false}
                wrapItems={false}
              >
                <FlexItem
                  as="span"
                  elementRef={[Function]}
                  grow={false}
                  shrink={false}
                >
                  <OutcomePopover
                    outcome={
                      Object {
                        "assignments": Array [
                          Object {
                            "assignment_id": 1,
                            "learning_outcome_id": 1,
                            "submission_types": "online_quiz",
                            "title": "My assignment",
                            "url": "www.example.com",
                          },
                        ],
                        "calculation_method": "highest",
                        "expansionId": 100,
                        "id": 1,
                        "mastered": false,
                        "mastery_points": 3,
                        "points_possible": 5,
                        "ratings": Array [
                          Object {
                            "description": "My first rating",
                          },
                          Object {
                            "description": "My second rating",
                          },
                        ],
                        "results": Array [],
                        "score": 1,
                        "title": "My outcome",
                      }
                    }
                    outcomeProficiency={null}
                  />
                </FlexItem>
                <FlexItem
                  as="span"
                  elementRef={[Function]}
                  grow={false}
                  padding="0 x-small"
                  shrink={true}
                >
                  <TruncateText
                    debounce={0}
                    ellipsis="â€¦"
                    ignore={
                      Array [
                        " ",
                        ".",
                        ",",
                      ]
                    }
                    maxLines={1}
                    onUpdate={[Function]}
                    position="end"
                    truncate="character"
                  >
                    My outcome
                  </TruncateText>
                </FlexItem>
              </Flex>
            </Text>
          </FlexItem>
          <FlexItem
            as="span"
            elementRef={[Function]}
            grow={false}
            shrink={false}
          >
            <Text
              as="span"
              letterSpacing="normal"
              size="small"
              wrap="normal"
            >
              1 alignment
            </Text>
          </FlexItem>
        </Flex>
      </FlexItem>
      <FlexItem
        as="span"
        elementRef={[Function]}
        grow={false}
        shrink={false}
      >
        <Pill
          margin="0 0 0 x-small"
          text="Not mastered"
          variant="default"
        />
      </FlexItem>
    </Flex>
  }
  toggleLabel="Toggle alignment details for My outcome"
  transition={true}
>
  <List
    as="ul"
    delimiter="dashed"
    margin="none"
    size="medium"
    variant="unstyled"
  >
    <UnassessedAssignment
      assignment={
        Object {
          "assignment_id": 1,
          "learning_outcome_id": 1,
          "submission_types": "online_quiz",
          "title": "My assignment",
          "url": "www.example.com",
        }
      }
      key="1"
    />
  </List>
</ToggleGroup>
`;

exports[`renders correctly expanded with no results or assignments 1`] = `
<ToggleGroup
  as="span"
  border={false}
  defaultExpanded={false}
  elementRef={[Function]}
  expanded={true}
  icon={[Function]}
  iconExpanded={[Function]}
  onToggle={[Function]}
  size="medium"
  summary={
    <Flex
      as="span"
      data-selenium="outcome"
      direction="row"
      elementRef={[Function]}
      inline={false}
      justifyItems="space-between"
      visualDebug={false}
      wrapItems={false}
    >
      <FlexItem
        as="span"
        elementRef={[Function]}
        grow={false}
        shrink={true}
      >
        <Flex
          as="span"
          direction="column"
          elementRef={[Function]}
          inline={false}
          justifyItems="start"
          visualDebug={false}
          wrapItems={false}
        >
          <FlexItem
            as="span"
            elementRef={[Function]}
            grow={false}
            shrink={false}
          >
            <Text
              as="span"
              letterSpacing="normal"
              size="medium"
              wrap="normal"
            >
              <Flex
                as="span"
                direction="row"
                elementRef={[Function]}
                inline={false}
                justifyItems="start"
                visualDebug={false}
                wrapItems={false}
              >
                <FlexItem
                  as="span"
                  elementRef={[Function]}
                  grow={false}
                  shrink={false}
                >
                  <OutcomePopover
                    outcome={
                      Object {
                        "assignments": Array [],
                        "calculation_method": "highest",
                        "expansionId": 100,
                        "id": 1,
                        "mastered": false,
                        "mastery_points": 3,
                        "points_possible": 5,
                        "ratings": Array [
                          Object {
                            "description": "My first rating",
                          },
                          Object {
                            "description": "My second rating",
                          },
                        ],
                        "results": Array [],
                        "score": 1,
                        "title": "My outcome",
                      }
                    }
                    outcomeProficiency={null}
                  />
                </FlexItem>
                <FlexItem
                  as="span"
                  elementRef={[Function]}
                  grow={false}
                  padding="0 x-small"
                  shrink={true}
                >
                  <TruncateText
                    debounce={0}
                    ellipsis="â€¦"
                    ignore={
                      Array [
                        " ",
                        ".",
                        ",",
                      ]
                    }
                    maxLines={1}
                    onUpdate={[Function]}
                    position="end"
                    truncate="character"
                  >
                    My outcome
                  </TruncateText>
                </FlexItem>
              </Flex>
            </Text>
          </FlexItem>
          <FlexItem
            as="span"
            elementRef={[Function]}
            grow={false}
            shrink={false}
          >
            <Text
              as="span"
              letterSpacing="normal"
              size="small"
              wrap="normal"
            >
              No alignments
            </Text>
          </FlexItem>
        </Flex>
      </FlexItem>
      <FlexItem
        as="span"
        elementRef={[Function]}
        grow={false}
        shrink={false}
      >
        <Pill
          margin="0 0 0 x-small"
          text="Not mastered"
          variant="default"
        />
      </FlexItem>
    </Flex>
  }
  toggleLabel="Toggle alignment details for My outcome"
  transition={true}
>
  <View
    as="div"
    borderColor="default"
    debug={false}
    display="auto"
    focusColor="info"
    focusPosition="offset"
    focused={false}
    overflowX="visible"
    overflowY="visible"
    padding="small"
    position="static"
    shouldAnimateFocus={true}
  >
    <Text
      as="span"
      letterSpacing="normal"
      size="medium"
      wrap="normal"
    >
      No alignments are available for this outcome.
    </Text>
  </View>
</ToggleGroup>
`;

exports[`renders the Outcome component 1`] = `
<ToggleGroup
  as="span"
  border={false}
  defaultExpanded={false}
  elementRef={[Function]}
  expanded={false}
  icon={[Function]}
  iconExpanded={[Function]}
  onToggle={[Function]}
  size="medium"
  summary={
    <Flex
      as="span"
      data-selenium="outcome"
      direction="row"
      elementRef={[Function]}
      inline={false}
      justifyItems="space-between"
      visualDebug={false}
      wrapItems={false}
    >
      <FlexItem
        as="span"
        elementRef={[Function]}
        grow={false}
        shrink={true}
      >
        <Flex
          as="span"
          direction="column"
          elementRef={[Function]}
          inline={false}
          justifyItems="start"
          visualDebug={false}
          wrapItems={false}
        >
          <FlexItem
            as="span"
            elementRef={[Function]}
            grow={false}
            shrink={false}
          >
            <Text
              as="span"
              letterSpacing="normal"
              size="medium"
              wrap="normal"
            >
              <Flex
                as="span"
                direction="row"
                elementRef={[Function]}
                inline={false}
                justifyItems="start"
                visualDebug={false}
                wrapItems={false}
              >
                <FlexItem
                  as="span"
                  elementRef={[Function]}
                  grow={false}
                  shrink={false}
                >
                  <OutcomePopover
                    outcome={
                      Object {
                        "assignments": Array [
                          Object {
                            "assignment_id": 1,
                            "learning_outcome_id": 1,
                            "submission_types": "online_quiz",
                            "title": "My assignment",
                            "url": "www.example.com",
                          },
                        ],
                        "calculation_method": "highest",
                        "expansionId": 100,
                        "id": 1,
                        "mastered": false,
                        "mastery_points": 3,
                        "points_possible": 5,
                        "ratings": Array [
                          Object {
                            "description": "My first rating",
                          },
                          Object {
                            "description": "My second rating",
                          },
                        ],
                        "results": Array [
                          Object {
                            "assignment": Object {
                              "id": "live_assessments/assessment_1",
                              "name": "My assessment",
                              "score": 0,
                              "submission_types": "magic_marker",
                            },
                            "id": 2,
                            "percent": 0.1,
                            "score": 1,
                            "submitted_or_assessed_at": "2019-02-01T07:01:00.000Z",
                          },
                          Object {
                            "assignment": Object {
                              "html_url": "http://foo",
                              "id": "assignment_1",
                              "name": "My assignment",
                              "score": 0,
                              "submission_types": "online_quiz",
                            },
                            "id": 1,
                            "percent": 0.1,
                            "score": 1,
                            "submitted_or_assessed_at": "2018-02-01T07:01:00.000Z",
                          },
                        ],
                        "score": 1,
                        "title": "My outcome",
                      }
                    }
                    outcomeProficiency={null}
                  />
                </FlexItem>
                <FlexItem
                  as="span"
                  elementRef={[Function]}
                  grow={false}
                  padding="0 x-small"
                  shrink={true}
                >
                  <TruncateText
                    debounce={0}
                    ellipsis="â€¦"
                    ignore={
                      Array [
                        " ",
                        ".",
                        ",",
                      ]
                    }
                    maxLines={1}
                    onUpdate={[Function]}
                    position="end"
                    truncate="character"
                  >
                    My outcome
                  </TruncateText>
                </FlexItem>
              </Flex>
            </Text>
          </FlexItem>
          <FlexItem
            as="span"
            elementRef={[Function]}
            grow={false}
            shrink={false}
          >
            <Text
              as="span"
              letterSpacing="normal"
              size="small"
              wrap="normal"
            >
              1 alignment
            </Text>
          </FlexItem>
        </Flex>
      </FlexItem>
      <FlexItem
        as="span"
        elementRef={[Function]}
        grow={false}
        shrink={false}
      >
        <span>
          <PresentationContent
            as="span"
          >
            <Text
              as="span"
              letterSpacing="normal"
              size="medium"
              wrap="normal"
            >
              1
              /
              5
            </Text>
          </PresentationContent>
          <ScreenReaderContent
            as="span"
          >
            1 out of 5 points
          </ScreenReaderContent>
        </span>
        <Pill
          margin="0 0 0 x-small"
          text="Not mastered"
          variant="default"
        />
      </FlexItem>
    </Flex>
  }
  toggleLabel="Toggle alignment details for My outcome"
  transition={true}
>
  <List
    as="ul"
    delimiter="dashed"
    margin="none"
    size="medium"
    variant="unstyled"
  >
    <ListItem
      key="2"
    >
      <AssignmentResult
        outcome={
          Object {
            "assignments": Array [
              Object {
                "assignment_id": 1,
                "learning_outcome_id": 1,
                "submission_types": "online_quiz",
                "title": "My assignment",
                "url": "www.example.com",
              },
            ],
            "calculation_method": "highest",
            "expansionId": 100,
            "id": 1,
            "mastered": false,
            "mastery_points": 3,
            "points_possible": 5,
            "ratings": Array [
              Object {
                "description": "My first rating",
              },
              Object {
                "description": "My second rating",
              },
            ],
            "results": Array [
              Object {
                "assignment": Object {
                  "id": "live_assessments/assessment_1",
                  "name": "My assessment",
                  "score": 0,
                  "submission_types": "magic_marker",
                },
                "id": 2,
                "percent": 0.1,
                "score": 1,
                "submitted_or_assessed_at": "2019-02-01T07:01:00.000Z",
              },
              Object {
                "assignment": Object {
                  "html_url": "http://foo",
                  "id": "assignment_1",
                  "name": "My assignment",
                  "score": 0,
                  "submission_types": "online_quiz",
                },
                "id": 1,
                "percent": 0.1,
                "score": 1,
                "submitted_or_assessed_at": "2018-02-01T07:01:00.000Z",
              },
            ],
            "score": 1,
            "title": "My outcome",
          }
        }
        outcomeProficiency={null}
        result={
          Object {
            "assignment": Object {
              "id": "live_assessments/assessment_1",
              "name": "My assessment",
              "score": 0,
              "submission_types": "magic_marker",
            },
            "id": 2,
            "percent": 0.1,
            "score": 1,
            "submitted_or_assessed_at": "2019-02-01T07:01:00.000Z",
          }
        }
      />
    </ListItem>
    <ListItem
      key="1"
    >
      <AssignmentResult
        outcome={
          Object {
            "assignments": Array [
              Object {
                "assignment_id": 1,
                "learning_outcome_id": 1,
                "submission_types": "online_quiz",
                "title": "My assignment",
                "url": "www.example.com",
              },
            ],
            "calculation_method": "highest",
            "expansionId": 100,
            "id": 1,
            "mastered": false,
            "mastery_points": 3,
            "points_possible": 5,
            "ratings": Array [
              Object {
                "description": "My first rating",
              },
              Object {
                "description": "My second rating",
              },
            ],
            "results": Array [
              Object {
                "assignment": Object {
                  "id": "live_assessments/assessment_1",
                  "name": "My assessment",
                  "score": 0,
                  "submission_types": "magic_marker",
                },
                "id": 2,
                "percent": 0.1,
                "score": 1,
                "submitted_or_assessed_at": "2019-02-01T07:01:00.000Z",
              },
              Object {
                "assignment": Object {
                  "html_url": "http://foo",
                  "id": "assignment_1",
                  "name": "My assignment",
                  "score": 0,
                  "submission_types": "online_quiz",
                },
                "id": 1,
                "percent": 0.1,
                "score": 1,
                "submitted_or_assessed_at": "2018-02-01T07:01:00.000Z",
              },
            ],
            "score": 1,
            "title": "My outcome",
          }
        }
        outcomeProficiency={null}
        result={
          Object {
            "assignment": Object {
              "html_url": "http://foo",
              "id": "assignment_1",
              "name": "My assignment",
              "score": 0,
              "submission_types": "online_quiz",
            },
            "id": 1,
            "percent": 0.1,
            "score": 1,
            "submitted_or_assessed_at": "2018-02-01T07:01:00.000Z",
          }
        }
      />
    </ListItem>
  </List>
</ToggleGroup>
`;
