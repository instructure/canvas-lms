/*
@styleguide Colors


## 3:1 Default Colors

<div class="grid-row Colorguide-container--primary-theme">
  <div class="Colorguide-color Colorguide-color--primary">
    <span class="Colorguide-var">
      Brand Primary
      <br/>
      $ic-brand-primary
    </span>
  </div>
  <div class="Colorguide-color Colorguide-color--secondary">
    <span class="Colorguide-var">
      Brand Secondary
      <br/>
      $ic-brand-secondary
    </span>
  </div>
  <div class="Colorguide-color Colorguide-color--success">
    <span class="Colorguide-var ">
      Success Green
      <br/>
      $ic-color-success
    </span>
  </div>
  <div class="Colorguide-color Colorguide-color--neutral">
    <span class="Colorguide-var">
      Neutral Grey
      <br/>
      $ic-color-neutral
    </span>
  </div>  
  <div class="Colorguide-color Colorguide-color--action">
    <span class="Colorguide-var">
      Action Magenta
      <br/>
      $ic-color-action
    </span>
  </div>
  <div class="Colorguide-color Colorguide-color--danger">
    <span class="Colorguide-var">
      Danger Red
      <br/>
      $ic-color-danger
    </span>
  </div>
  <div class="Colorguide-color Colorguide-color--alert">
    <span class="Colorguide-var">
      Alert Gold
      <br/>
      $ic-color-alert
    </span>
  </div>  
  <div class="Colorguide-color Colorguide-color--light">
    <span class="Colorguide-var">
      Light White
      <br/>
      $ic-color-light
    </span>
  </div>    
  <div class="Colorguide-color Colorguide-color--dark">
    <span class="Colorguide-var">
      Dark Grey
      <br/>
      $ic-color-dark
    </span>
  </div>
</div>


## 4.5:1 High Contrast Colors

**Note**: We are forcing high-contrast mode here to show color changes
<br/>
<div class="grid-row Colorguide-container--hc-theme">
  <div class="Colorguide-color Colorguide-color--primary">
    <span class="Colorguide-var">
      Brand Primary
      <br/>
      $ic-brand-primary
    </span>
  </div>
  <div class="Colorguide-color Colorguide-color--secondary">
    <span class="Colorguide-var">
      Brand Secondary
      <br/>
      $ic-brand-secondary
    </span>
  </div>
  <div class="Colorguide-color Colorguide-color--success">
    <span class="Colorguide-var ">
      Success Green
      <br/>
      $ic-color-success
    </span>
  </div>
  <div class="Colorguide-color Colorguide-color--neutral">
    <span class="Colorguide-var">
      Neutral Grey
      <br/>
      $ic-color-neutral
    </span>
  </div>  
  <div class="Colorguide-color Colorguide-color--action">
    <span class="Colorguide-var">
      Action Magenta
      <br/>
      $ic-color-action
    </span>
  </div>
  <div class="Colorguide-color Colorguide-color--danger">
    <span class="Colorguide-var">
      Danger Red
      <br/>
      $ic-color-danger
    </span>
  </div>
  <div class="Colorguide-color Colorguide-color--alert">
    <span class="Colorguide-var">
      Alert Gold
      <br/>
      $ic-color-alert
    </span>
  </div>  
  <div class="Colorguide-color Colorguide-color--light">
    <span class="Colorguide-var">
      Light White
      <br/>
      $ic-color-light
    </span>
  </div>    
  <div class="Colorguide-color Colorguide-color--dark">
    <span class="Colorguide-var">
      Dark Grey
      <br/>
      $ic-color-dark
    </span>
  </div>
</div>

## Using color variables implementing new UI

While integrating new UI, it's best to use what we call a *functional variable* to pull in our main canvas variables.


### For example, if our code looks like this:


    <p class="i-need-a-specific-color">Hello, Pando!</p>


### Then we would write our scss it like:


    $myCustomColor: $ic-brand-primary;
    p.customColor {
      color: $myCustomColor;
    }


## Using color variables when updating old code

When you're in Canvas and changing old code and see a color that doesn't have a variable attached, be sure to change it and give it a functional variable or one of our primary canvas colors


### The Bad Way

    .class-name {
      color: #123456;
    }


### The Best Way

    $my-functional-variable: $ic-brand-primary;

    .class-name {
      color: $my-functional-variable;
    }


## Using color variables with accessibility in mind

We have specific flags that denote when a user has on High-Contrast mode. Most of our color variables have a high-contrast equivalent already built into Canvas, however, for the occasion where some tweaking needs to happen, be sure to make use of sass functions (such as ```lighten()``` and ```darken()```) to help change our primary palette.

### The Bad Way


    .class-name {
      color: #123456;
      @if use_high_contrast {
        color: #345678;
      }
    }


### The Better Way

    $my-functional-variable: $ic-brand-primary;

    .class-name {
      color: $ic-brand-primary; // this variable automatically switches when high contrast is on, yay!
    }


### The Best Way

    $my-functional-variable: $ic-brand-primary;

    .class-name {
      color: $my-functional-variable;
    }

## tl;dr

  - Use color variables when adding colors to your elements.
  - Do not use hex codes in .scss or .sass files.
  - If that color needs to be tweaked, use the scss functions for `lighten($my-color, 10%)` and `darken($my-color, 10%)`
  - High Contrast colors are automatically pulled in based on the canvas color variables.

*/