/*
 * Copyright (C) 2012 - present Instructure, Inc.
 *
 * This file is part of Canvas.
 *
 * Canvas is free software: you can redistribute it and/or modify it under
 * the terms of the GNU Affero General Public License as published by the Free
 * Software Foundation, version 3 of the License.
 *
 * Canvas is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU Affero General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Affero General Public License along
 * with this program. If not, see <http://www.gnu.org/licenses/>.
 */

///
  /// How to update Icons
  //
  //  The Instructure Icons repo is available at
  //  https://github.com/instructure/instructure-icons
  //
  //  - Add your new icon to the repo and release
  //  - Update the instructure-icons version in package.json
  //
///

/* @styleguide Icons

Canvas uses <a href="https://github.com/instructure/instructure-icons">Instructure Icons</a> for its icon library. There are various ways that you can bring icons into Canvas, including as a React component, or from our the icon font.

## Comprehensive Icon Listing

For a complete list of Instructure Icons go to <a href="http://instructure.github.io/instructure-icons/">http://instructure.github.io/instructure-icons</a>

## Light vs Solid

There are two weights to our icons: line or solid. Canvas defaults to solid, however, if you want to use the same icon as a line varient you can add the `icon-Line` utility class.

```html
<a class="icon-add icon-Line" href="whatever">Add Stuff</a>
```

## Using as a React Component

```javascript
import { IconAddLine } from 'instructure-icons'

function MyComponent () {
  return <IconAddLine />
}
```

## Using the Icon Font

### Icons in links

```html
<a class="icon-add" href="whatever">Add Stuff</a>
```

### Icons in buttons links

```html
<p>
  <a class="icon-edit btn btn-primary">Edit</a>
</p>
<p>
  <button class="btn"><i class="icon-trash"></i>Delete</button>
</p>
```

Either use `<a>` with icon desired icon class added or insert `<i>` inside `<button>` and set to desired icon class

*/

@import "../../../node_modules/instructure-icons/fonts/Line/InstructureIcons-Line_icon-map.scss";
@import "../../../node_modules/instructure-icons/fonts/Solid/InstructureIcons-Solid_icon-map.scss";

$icon_default: "Line";

// this could be refactored if/when sass allows for variable interpolation
$icon_index: (
  "Line": $icons-Line,
  "Solid": $icons-Solid
);

@mixin InstIconFontFace($variant) {
  @font-face {
    font-family: "InstructureIcons-#{$variant}";
    src: url('/fonts/instructure_icons/#{$variant}/InstructureIcons-#{$variant}.eot');
    src: url('/fonts/instructure_icons/#{$variant}/InstructureIcons-#{$variant}.eot?#iefix') format('eot'),
      url('/fonts/instructure_icons/#{$variant}/InstructureIcons-#{$variant}.woff') format('woff'),
      url('/fonts/instructure_icons/#{$variant}/InstructureIcons-#{$variant}.ttf') format('truetype'),
      url('/fonts/instructure_icons/#{$variant}/InstructureIcons-#{$variant}.svg#InstructureIcons-#{$variant}') format('svg');
    font-weight: normal;
    font-style: normal;
  }
}

@each $variant, $icon_map in $icon_index {
  @include InstIconFontFace($variant);

  i[class*=icon-].icon-#{$variant},
  i[class^=icon-].icon-#{$variant},
  a[class*=icon-].icon-#{$variant},
  a[class^=icon-].icon-#{$variant} {
    &:before {
      font-family: "InstructureIcons-#{$variant}";
    }
  }
}

i[class*=icon-],
i[class^=icon-],
a[class*=icon-],
a[class^=icon-] {
  &:before {
    font-family: "InstructureIcons-#{$icon_default}";
    display: inline-block;
    vertical-align: top;
    line-height: 1;
    text-rendering: optimizeLegibility;

    // the specific reason for this being in the :before and not part of the <i> was to get
    // .input-appends to work with .btns that had an <i> icon in them.
    @include fontSize(16px);

    // override any properties in the cascade that might make the font display incorrectly
    text-transform: none !important;
    font-weight: normal !important;
    font-style: normal !important;
  }

  // flip all the arrows around in RTL
  @if $direction == 'rtl' {
    &[class*=right],
    &[class*=left] {
      &:before {
        transform: scale(-1, 1);
      }
    }
  }
}

i[class*=icon-], i[class^=icon-] {
  display: inline-block;
  font-style: normal !important;
  line-height: 1;

  // adjust icon sizes to look good with our large-size button class
  .btn-large &,
  .Button--large & {
    line-height: 1;
    &:before{ font-size: 1.125rem; }
  }

  // most icons do not look good this small, so use sparingly.
  // this should only be used for things like: icon-settings and icon-mini-arrow-down
  .btn-mini &,
  .Button--mini {
    line-height: 1;
    &:before{ font-size: 0.75rem; }
  }

}

// when an icon is applied directly to a link, add a little left margin to make
// things look nicer
a[class*=icon-], a[class^=icon-] {
  &:before {
    margin-#{direction(right)}: 4px;
    vertical-align: text-bottom;
  }
}

.standalone-icon {
  // use to make standalone icons within links display as dark gray, not default link blue
  &:before {
    @if $use_high_contrast {
      color: #444;
    } @else {
      color: #555;
    }
  }
}

// change vertical alignment of icons used with common typographic elements to line them up better
h1, h2, h3, h4, .h1, .h2, .h3, .h4, p {

  i[class*=icon-]:before, i[class^=icon-]:before {
    vertical-align: baseline;
  }

}

@each $variant, $icon_map in $icon_index {

  @if ($variant == $icon_default) {
    @each $icon_name, $unicode in $icon_map {
      .icon-#{$icon_name}:before {
        content: $unicode;
      }
    }
  }
  @else {
    @each $icon_name, $unicode in $icon_map {
      .icon-#{$icon_name}.icon-#{$variant}:before {
        content: $unicode;
      }
    }
  }
}
