// Instructure's bootstrap mods:
@import "environment";

body {
  font-size: 13px;
}

//*********** BEGIN HEADER OVERRIDES **************

// make .h1, .h2, ... look like h1, h2, ...
// see app/stylesheets/bootstrap/_type.scss

.h1, .h2, .h3, .h4, .h5, .h6 {
  margin: ($baseLineHeight / 2) 0;
  font-family: $headingsFontFamily;
  font-weight: $headingsFontWeight;
  line-height: $baseLineHeight;
  color: $headingsColor;
  text-rendering: optimizelegibility; // Fix the character spacing for headings
  small {
    font-weight: normal;
    line-height: 1;
    color: $grayLight;
  }
}

.h1, .h2, .h3 { line-height: $baseLineHeight * 2; }

.h1 { font-size: $baseFontSize * 2.75; } // ~38px
.h2 { font-size: $baseFontSize * 2.25; } // ~32px
.h3 { font-size: $baseFontSize * 1.75; } // ~24px
.h4 { font-size: $baseFontSize * 1.25; } // ~18px
.h5 { font-size: $baseFontSize; }
.h6 { font-size: $baseFontSize * 0.85; } // ~12px

.h1 small { font-size: $baseFontSize * 1.75; } // ~24px
.h2 small { font-size: $baseFontSize * 1.25; } // ~18px
.h3 small { font-size: $baseFontSize; }
.h4 small { font-size: $baseFontSize; }


// now tweak them all a bit to be less shouty

h1, h2, h3, h4, h5, h6, .h1, .h2, .h3, .h4, .h5, .h6 {
  font-weight: normal;
}
h1, h2, .h1, .h2 {
  font-size: 1.8em;
}
h3, .h3 {
  font-size: 1.5em;
}
//********** END HEADER OVERRIDES *************


// make links in .alert be same color as alert text but bold
.alert a {
  font-weight: bold;
  color: inherit;
}

// have to make labels inline-block by default,
// boostrap makes them all block but we have a ton of
// existing forms that count on them being inline.
label { display: inline-block; }

// if you are making a bootstrap style form and need to get your labels to look right (be block),
// add the class .bootstrap-form to the <form>. this is the only need for .bootstrap-form, you
// dont need to add the .bootstrap-form class if you already have the .form-horizontal class.
.form-horizontal label, .bootstrap-form label { display: block;}

// make labels in paragraphs the same size as regular text (as opposed to slightly larger)
p label {
  font-size: inherit;
}

//remove default bottom margin on a bootstrap form
.bootstrap-form.no-margin {
  margin-bottom: 0;
}

//get rid of bottom margin on any element (needed mostly for text inputs)
.no-margin-bottom {
  margin-bottom: 0 !important;
}

//bootstrap makes all <select>s a certain width. provide a class to enable one to be auto width
select.un-bootrstrapify {
  width: auto;
  border-radius: 0;
  height: auto;
}

.form-actions {
  text-align: right;
  padding: 10px 10px 11px;

  // when .form-actions is in a modal box, make it look different per Kyle mockup
  .ui-dialog-content & {
    margin-bottom: 0;
    box-shadow: inset 0 1px 0 #fff;
  }
  
  // when you want your non-modal .form-actions footer to not have any whitespace around it
  &.flush {
    margin-bottom: -1em;
    margin-left: -1em;
    margin-right: -1em;
  }
}

// for checkboxes not wrapped in a label.checkbox, make them look decent,
// should remove this eventually.
input[type=checkbox] + label,
input[type=radio] + label {
  vertical-align: -4px;
}

// align inline form buttons to prevent staggering
.form-inline {
  input[type=checkbox] + label,
  input[type=radio] + label {
    vertical-align: middle;
  }
}

// all the browsers render this differently, remove line-height so the text doesn't
// get ridiculously misaligned.
input[type=file] {
  line-height: 1em;
}

// modify the default bootstrap .table class to have the thead look like our .toolbars
.table > thead {
  background: #e4e9ed;
}
.table-vertically-center {
  th, td {
    vertical-align: middle;
  }
}
.table .center {
  text-align: center;
}
.table-striped {
  border: 1px solid #dddddd;
  > thead {
    border: 1px solid #c2c8cf;
  }
  > tbody > tr {
    td {
      background: #fff; // so we can hide focusable stuff via z-index
    }
    &:first-child > td {
      border-top: 0;
    }
  }
}
.table-hover tbody {
  tr:hover, tr.table-hover-row {
    td, th {
      background: #e5f3ff;
    }
  }
}

// gets rid of ugly border
iframe#tool_content {
  border: none;
}

// "ui.dialog you are so dumb. you are really dumb, for real"
// ui.dialog cancels input events for any positioned element w/ a lower
// z-index, even if the element is inside the dialog (in which case the
// z-index is not actually lower. so dumb)
.ui-dialog {
  .input-append, .input-prepend {
    input, select, .uneditable-input {
      &:focus {
        z-index: 1001;
      }
    }
  }
}

// fixes bug in Cal1 where not-allowed cursor appears over checkboxes set to readonly
.calendar_links input[readonly] { cursor: auto; }

blockquote p {
  font-size: inherit;
}

.progress-small {
  height: 10px;
  margin: 5px 0;
}

.popover {
  z-index: 10;
}

/*
@styleguide Popovers

Don't do this, we need a more accessible way to handle these cases.
The screenreaders will read all the html entities and that's just rude.

```html
<a
  data-tooltip='{"tooltipClass":"popover right", "position":"right"}'
  title="<div class='popover-title'>Title of Popover</div><div class='popover-content'><p>Lo-fi next level kale chips narwhal tattooed, tonx YOLO mixtape.</p></div>">
  Text with popover
</a>
<p>
  <button
    data-tooltip='{"tooltipClass":"popover top", "position":"top"}'
    title="<div class='popover-title'>Title of Popover</div><div class='popover-content'><p>Lo-fi next level kale chips narwhal tattooed, tonx YOLO mixtape.</p></div>"
    class="btn">
    button with popover
  </button>
</p>
```

*/

.ui-widget.ui-tooltip.popover {
  padding: 1px;
  font-size: 14px;
  max-width: 236px;
  width: 236px;
  color: $gray;
  text-align: left;
  text-decoration: none;
  background-color: $popoverBackground;
  opacity: 1;
  border: 1px solid #ccc;
  border: 1px solid rgba(0,0,0,.2);
  @include border-radius(6px);
  @include box-shadow(0 5px 10px rgba(0,0,0,.2));
}

$popoverArrowDistanceFromCorner: $popoverArrowOuterWidth;
.ui-tooltip.popover {
  &:before, &:after {
    border-color: transparent transparent $popoverArrowOuterColor transparent;
    position: absolute;
    border-style:solid;
    border-width: $popoverArrowOuterWidth;
    width:0;
    height:0;
    content: "";
    top: -$popoverArrowOuterWidth * 2;
    left: $popoverArrowDistanceFromCorner;
  }
  &:after {
    border-bottom-color: $popoverTitleBackground;
    border-width: $popoverArrowWidth;
    top: -$popoverArrowWidth * 2;
    left: $popoverArrowDistanceFromCorner + 1;
  }
  &.right:before {
    left: auto;
    right: $popoverArrowDistanceFromCorner;
  }
  &.right:after {
    left: auto;
    right: $popoverArrowDistanceFromCorner + 1;
  }
  &.bottom:before {
    border-color: $popoverArrowOuterColor transparent transparent transparent;
    top: auto;
    bottom: -$popoverArrowOuterWidth * 2;
  }
  &.bottom:after {
    border-color: $popoverArrowColor transparent transparent transparent;
    top: auto;
    bottom: -$popoverArrowWidth * 2;
  }
  &.center:before {
    left: 50%;
    margin-left: -$popoverArrowOuterWidth;
    right: auto;
  }
  &.center:after {
    left: 50%;
    margin-left: -$popoverArrowWidth;
    right: auto;
  }
  &.middle:before {
    top: 50%;
    margin-top: -$popoverArrowOuterWidth;
    bottom: auto;
  }
  &.middle:after {
    top: 50%;
    margin-top: -$popoverArrowWidth;
    bottom: auto;
  }
  &.horizontal:before {
    top: 50%;
    margin-top: -$popoverArrowOuterWidth;
    bottom: auto;
    left: -$popoverArrowOuterWidth * 2;
    right: auto;
    border-color: transparent $popoverArrowOuterColor transparent transparent;
  }
  &.horizontal:after {
    top: 50%;
    margin-top: -$popoverArrowWidth;
    bottom: auto;
    left: -$popoverArrowWidth * 2;
    right: auto;
    border-color: transparent $popoverArrowColor transparent transparent;
  }
  &.right.horizontal:before {
    left: auto;
    right: -$popoverArrowOuterWidth * 2;
    border-color: transparent transparent transparent $popoverArrowOuterColor;
  }
  &.right.horizontal:after {
    left: auto;
    right: -$popoverArrowWidth * 2;
    border-color: transparent transparent transparent $popoverArrowColor;
  }
  &.bottom.horizontal:before {
    top: auto;
    bottom: $popoverArrowDistanceFromCorner;
  }
  &.bottom.horizontal:after {
    top: auto;
    bottom: $popoverArrowDistanceFromCorner + 1;
  }
  &.top.horizontal:before {
    margin-top: 0;
    top: $popoverArrowDistanceFromCorner;
  }
  &.top.horizontal:after {
    margin-top: 0;
    top: $popoverArrowDistanceFromCorner + 1;
  }
  &.content-top.horizontal:before {
    margin-top: 0;
    top: 35px;
  }
  &.content-top.horizontal:after {
    margin-top: 0;
    top: 36px;
  }
}





