@import "base/ic_mixins"; // so Bootstrap mixins that need clearfix can still use it

//
// Mixins
// --------------------------------------------------


// UTILITY MIXINS
// --------------------------------------------------

// Webkit-style focus
// ------------------
@mixin tab-focus() {
  // Default
  outline: thin dotted #333;
  // Webkit
  outline: 5px auto -webkit-focus-ring-color;
  outline-offset: -2px;
  text-decoration: none;
}

// Placeholder text
// -------------------------
@mixin placeholder($color: $placeholderText) {
  &:-moz-placeholder {
    color: $color;
  }
  &:-ms-input-placeholder {
    color: $color;
  }
  &::-webkit-input-placeholder {
    color: $color;
  }
}

// CSS image replacement
// -------------------------
// Source: https://github.com/h5bp/html5-boilerplate/commit/aa0396eae757
@mixin hide-text {
  font: 0/0 a;
  color: transparent;
  text-shadow: none;
  background-color: transparent;
  border: 0;
}

// FONTS
// --------------------------------------------------
@mixin font-shorthand($size: $baseFontSize, $weight: normal, $lineHeight: $baseLineHeight) {
  @include fontSize($size);
  font-weight: $weight;
  line-height: $lineHeight;
}

// FORMS
// --------------------------------------------------

// Block level inputs
@mixin input-block-level {
  display: block;
  width: 100%;
  // Make inputs at least the height of their button counterpart (base line-height + padding + border) we add +8
  // to accommodate the 8px of padding added with the new buttons
  min-height: $inputHeight + 8;
  @include box-sizing(border-box); // Makes inputs behave like true block-level elements
}



// Mixin for form field states
@mixin formFieldState($textColor: #555, $borderColor: #ccc, $backgroundColor: #f5f5f5) {
  // Set the text color
  > label,
  .help-block,
  .help-inline {
    color: $textColor;
  }
  // Style inputs accordingly
  .checkbox,
  .radio,
  input,
  select,
  textarea {
    color: $textColor;
  }
  input,
  select,
  textarea {
    border-color: $borderColor;
    @include box-shadow(inset 0 1px 1px rgba(0,0,0,.075)); // Redeclare so transitions work
    &:focus {
      border-color: darken($borderColor, 10%);
      @include box-shadow(inset 0 1px 1px rgba(0,0,0,.075), 0 0 6px lighten($borderColor, 20%));
    }
  }
  // Give a small background color for input-prepend/-append
  .input-prepend .add-on,
  .input-append .add-on {
    color: $textColor;
    background-color: $backgroundColor;
    border-color: $textColor;
  }
}



// CSS3 PROPERTIES
// --------------------------------------------------

// Border Radius
@mixin border-radius($radius) {
  border-radius: direction-corners($radius);
}
// Single Side Border Radius
@mixin border-right-radius($radius) {
  border-top-#{direction(right)}-radius: $radius;
  border-bottom-#{direction(right)}-radius: $radius;
}
@mixin border-left-radius($radius) {
  border-top-#{direction(left)}-radius: $radius;
  border-bottom-#{direction(left)}-radius: $radius;
}

// Drop shadows
@mixin box-shadow($shadow...) {
  box-shadow: $shadow;
}

// Transitions
@mixin transition($transition...) {
  transition: $transition;
}

// Background sizing
@mixin background-size($size) {
  background-size: $size;
}

// Box sizing
@mixin box-sizing($boxmodel) {
  box-sizing: $boxmodel;
}

// BACKGROUNDS
// --------------------------------------------------

// Gradient Bar Colors for buttons and alerts
@mixin gradientBar($primaryColor, $secondaryColor, $textColor: #fff, $textShadow: 0 -1px 0 rgba(0,0,0,.25)) {
  color: $textColor;
  text-shadow: $textShadow;
  @include gradient-vertical($primaryColor, $secondaryColor);
  border-color: $secondaryColor $secondaryColor darken($secondaryColor, 15%);
  border-color: rgba(0,0,0,.1) rgba(0,0,0,.1) fade-in(rgba(0,0,0,.1), 0.15);
}

// Gradients
@mixin gradient-vertical($startColor: #555, $endColor: #333) {
  background-color: mix($startColor, $endColor, 62.5%);
  background-image: -webkit-gradient(linear, 0 0, 0 100%, from($startColor), to($endColor)); // Safari 4+, Chrome 2+
  background-image: linear-gradient(to bottom, $startColor, $endColor); // Standard, IE10
  background-repeat: repeat-x;
}
@mixin gradient-striped($color: #555, $angle: 45deg) {
  background-color: $color;
  background-image: -webkit-gradient(linear, 0 100%, 100% 0, color-stop(.25, rgba(255,255,255,.15)), color-stop(.25, transparent), color-stop(.5, transparent), color-stop(.5, rgba(255,255,255,.15)), color-stop(.75, rgba(255,255,255,.15)), color-stop(.75, transparent), to(transparent));
  background-image: linear-gradient($angle, rgba(255,255,255,.15) 25%, transparent 25%, transparent 50%, rgba(255,255,255,.15) 50%, rgba(255,255,255,.15) 75%, transparent 75%, transparent);
}



// COMPONENT MIXINS
// --------------------------------------------------

// Horizontal dividers
// -------------------------
// Dividers (basically an hr) within dropdowns and nav lists
@mixin nav-divider($top: #e5e5e5, $bottom: $white) {
  height: 1px;
  margin: (($baseLineHeight / 2) - 1) 1px; // 8px 1px
  overflow: hidden;
  background-color: $top;
  border-bottom: 1px solid $bottom;
}

// Grid System
// -----------

// Centered container element
@mixin container-fixed() {
  margin-right: auto;
  margin-left: auto;
  @include clearfix();
}

// Table columns
@mixin tableColumns($columnSpan: 1) {
  float: none; // undo default grid column styles
  width: (($gridColumnWidth) * $columnSpan) + ($gridGutterWidth * ($columnSpan - 1)) - 16; // 16 is total padding on left and right of table cells
  margin-#{direction(left)}: 0; // undo default grid column styles
}

// The Grid
@mixin grid-core($gridColumnWidth, $gridGutterWidth) {
  .row {
    margin-#{direction(left)}: $gridGutterWidth * -1;
    @include clearfix();
  }

  [class*="span"] {
    float: direction(left);
    min-height: 1px; // prevent collapsing columns
    margin-#{direction(left)}: $gridGutterWidth;
  }

  // Set the container width
  .container{
    @include grid-core-span($gridColumns, $gridColumnWidth, $gridGutterWidth);
  }

  // generate .spanX and .offsetX
  @include grid-core-span-x($gridColumns, $gridColumnWidth, $gridGutterWidth);
  @include grid-core-offset-x($gridColumns, $gridColumnWidth, $gridGutterWidth);
}

@mixin grid-core-span-x($gridColumns, $gridColumnWidth, $gridGutterWidth) {
  @while $gridColumns > 0 {
    .span#{$gridColumns} { @include grid-core-span($gridColumns, $gridColumnWidth, $gridGutterWidth)}
    $gridColumns: $gridColumns - 1;
  }
}

@mixin grid-core-offset-x($gridColumns, $gridColumnWidth, $gridGutterWidth) {
  @while $gridColumns > 0 {
    .offset#{$gridColumns} { @include grid-core-offset($gridColumns, $gridColumnWidth, $gridGutterWidth); }
    $gridColumns: $gridColumns - 1;
  }
}

@mixin grid-core-span($columns, $gridColumnWidth, $gridGutterWidth) {
  width: ($gridColumnWidth * $columns) + ($gridGutterWidth * ($columns - 1));
}

@mixin grid-core-offset($columns, $gridColumnWidth, $gridGutterWidth) {
  margin-#{direction(left)}: ($gridColumnWidth * $columns) + ($gridGutterWidth * ($columns + 1));
}



@mixin grid-fluid($fluidGridColumnWidth, $fluidGridGutterWidth) {
  .row-fluid {
    width: 100%;
    @include clearfix();
    [class*="span"] {
      display: block;
      width: 100%;
      min-height: $inputHeight;
      @include box-sizing(border-box);
      float: direction(left);
      margin-#{direction(left)}: $fluidGridGutterWidth;
    }
    [class*="span"]:first-child {
      margin-#{direction(left)}: 0;
    }

    // Space grid-sized controls properly if multiple per line
    .controls-row [class*="span"] + [class*="span"] {
      margin-#{direction(left)}: $fluidGridGutterWidth;
    }

    // generate .spanX and .offsetX
    @include grid-fluid-span-x($gridColumns, $fluidGridColumnWidth, $fluidGridGutterWidth);
    @include grid-fluid-offset-x($gridColumns, $fluidGridColumnWidth, $fluidGridGutterWidth);
  }
}

@mixin grid-fluid-span-x($gridColumns, $fluidGridColumnWidth, $fluidGridGutterWidth) {
  @while $gridColumns > 0 {
    .span#{$gridColumns} { @include grid-fluid-span($gridColumns, $fluidGridColumnWidth, $fluidGridGutterWidth); }
    $gridColumns: $gridColumns - 1;
  }
}

@mixin grid-fluid-offset-x($gridColumns, $fluidGridColumnWidth, $fluidGridGutterWidth) {
  @while $gridColumns > 0 {
    .offset#{$gridColumns} { @include grid-fluid-offset($gridColumns, $fluidGridColumnWidth, $fluidGridGutterWidth); }
    .offset#{$gridColumns}:first-child { @include grid-fluid-offset-first-child($gridColumns, $fluidGridColumnWidth, $fluidGridGutterWidth); }
    $gridColumns: $gridColumns - 1;
  }
}

@mixin grid-fluid-span($columns, $fluidGridColumnWidth, $fluidGridGutterWidth) {
  width: ($fluidGridColumnWidth * $columns) + ($fluidGridGutterWidth * ($columns - 1));
}

@mixin grid-fluid-offset($columns, $fluidGridColumnWidth, $fluidGridGutterWidth) {
  margin-#{direction(left)}: ($fluidGridColumnWidth * $columns) + ($fluidGridGutterWidth * ($columns - 1)) + ($fluidGridGutterWidth * 2);
}

@mixin grid-fluid-offset-first-child($columns, $fluidGridColumnWidth, $fluidGridGutterWidth) {
  margin-#{direction(left)}: ($fluidGridColumnWidth * $columns) + ($fluidGridGutterWidth * ($columns - 1)) + ($fluidGridGutterWidth);
}



@mixin grid-input($gridColumnWidth, $gridGutterWidth) {
  input,
  textarea,
  .uneditable-input {
    margin-#{direction(left)}: 0; // override margin-left from core grid system
  }

  // Space grid-sized controls properly if multiple per line
  .controls-row [class*="span"] + [class*="span"] {
    margin-#{direction(left)}: $gridGutterWidth;
  }

  // generate .spanX
  @include grid-input-span-x($gridColumns, $gridColumnWidth, $gridGutterWidth);
}

@mixin grid-input-span-x($gridColumns, $gridColumnWidth, $gridGutterWidth) {
  @while $gridColumns > 0 {
    input.span#{$gridColumns},
    textarea.span#{$gridColumns},
    .uneditable-input.span#{$gridColumns} {
      @include grid-input-span($gridColumns, $gridColumnWidth, $gridGutterWidth);
    }
    $gridColumns: $gridColumns - 1;
  }
}

@mixin grid-input-span($columns, $gridColumnWidth, $gridGutterWidth) {
  width: (($gridColumnWidth) * $columns) + ($gridGutterWidth * ($columns - 1)) - 14;
}
