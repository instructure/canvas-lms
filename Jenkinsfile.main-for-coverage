#!/usr/bin/env groovy

/*
 * Copyright (C) 2019 - present Instructure, Inc.
 *
 * This file is part of Canvas.
 *
 * Canvas is free software: you can redistribute it and/or modify it under
 * the terms of the GNU Affero General Public License as published by the Free
 * Software Foundation, version 3 of the License.
 *
 * Canvas is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU Affero General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Affero General Public License along
 * with this program. If not, see <http://www.gnu.org/licenses/>.
 */


pipeline {
  agent { label 'canvas-docker' }
  options { ansiColor('xterm') }

  environment {
    CANVAS_LMS_REFSPEC = "${env.CANVAS_LMS_REFSPEC}"
    RUN_COVERAGE = '1'
    POSTGRES = '9.5'
    RUBY_PASSENGER = '2.4-xenial'
    PATCHSET_TAG = "${env.DOCKER_REGISTRY_FQDN}/jenkins/canvas-lms:master"
    COVERAGE = '1'
  }

  stages {
    stage('Print Env Variables') {
      steps {
        timeout(time: 20, unit: 'SECONDS') {
          sh 'build/new-jenkins/print-env-excluding-secrets.sh'
        }
      }
    }

    stage('Parallel Run Tests') {
      steps {
        script {
          def stages = [:]

          echo 'adding Javascript'
          stages['Javascript'] = {
            build(job: 'test-suites/JS', parameters: [
              string(name: 'CANVAS_LMS_REFSPEC', value: env.CANVAS_LMS_REFSPEC),
              string(name: 'RUN_COVERAGE', value: env.RUN_COVERAGE),
              string(name: 'POSTGRES', value: env.POSTGRES),
              string(name: 'RUBY_PASSENGER', value: env.RUBY_PASSENGER),
              string(name: 'PATCHSET_TAG', value: env.PATCHSET_TAG)
            ])
          }

          def distribution = load 'build/new-jenkins/groovy/distribution.groovy'
          distribution.stashBuildScripts()
          distribution.addRSpecSuites(stages)

          parallel(stages)
        }
      }
    }

    stage('Upload Coverage') {
      steps {
        script {
          def rspec = load 'build/new-jenkins/groovy/rspec.groovy'
          rspec.uploadSeleniumCoverage()
          rspec.uploadRSpecCoverage()
        }
      }
    }
  }

  post {
    always {
      script {
        def rspec = load 'build/new-jenkins/groovy/rspec.groovy'
        rspec.uploadSeleniumFailures()
        rspec.uploadRSpecFailures()
      }
    }
  }
}
